{
    "https://github.com/pre-commit/pre-commit-hooks": [
        {
            "id": "check-added-large-files",
            "name": "check for added large files",
            "description": "prevents giant files from being committed.",
            "entry": "check-added-large-files",
            "language": "python",
            "stages": [
                "commit",
                "push",
                "manual"
            ]
        },
        {
            "id": "check-ast",
            "name": "check python ast",
            "description": "simply checks whether the files parse as valid python.",
            "entry": "check-ast",
            "language": "python",
            "types": [
                "python"
            ]
        },
        {
            "id": "check-byte-order-marker",
            "name": "check BOM - deprecated: use fix-byte-order-marker",
            "description": "forbids files which have a utf-8 byte-order marker.",
            "entry": "check-byte-order-marker",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-builtin-literals",
            "name": "check builtin type constructor use",
            "description": "requires literal syntax when initializing empty or zero python builtin types.",
            "entry": "check-builtin-literals",
            "language": "python",
            "types": [
                "python"
            ]
        },
        {
            "id": "check-case-conflict",
            "name": "check for case conflicts",
            "description": "checks for files that would conflict in case-insensitive filesystems.",
            "entry": "check-case-conflict",
            "language": "python"
        },
        {
            "id": "check-docstring-first",
            "name": "check docstring is first",
            "description": "checks a common error of defining a docstring after code.",
            "entry": "check-docstring-first",
            "language": "python",
            "types": [
                "python"
            ]
        },
        {
            "id": "check-executables-have-shebangs",
            "name": "check that executables have shebangs",
            "description": "ensures that (non-binary) executables have a shebang.",
            "entry": "check-executables-have-shebangs",
            "language": "python",
            "types": [
                "text",
                "executable"
            ],
            "stages": [
                "commit",
                "push",
                "manual"
            ]
        },
        {
            "id": "check-illegal-windows-names",
            "name": "check illegal windows names",
            "entry": "Illegal windows filenames detected",
            "language": "fail",
            "files": "(?i)((^|/)(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\\.|/|$)|:)"
        },
        {
            "id": "check-json",
            "name": "check json",
            "description": "checks json files for parseable syntax.",
            "entry": "check-json",
            "language": "python",
            "types": [
                "json"
            ]
        },
        {
            "id": "check-shebang-scripts-are-executable",
            "name": "check that scripts with shebangs are executable",
            "description": "ensures that (non-binary) files with a shebang are executable.",
            "entry": "check-shebang-scripts-are-executable",
            "language": "python",
            "types": [
                "text"
            ],
            "stages": [
                "commit",
                "push",
                "manual"
            ]
        },
        {
            "id": "pretty-format-json",
            "name": "pretty format json",
            "description": "sets a standard for formatting json files.",
            "entry": "pretty-format-json",
            "language": "python",
            "types": [
                "json"
            ]
        },
        {
            "id": "check-merge-conflict",
            "name": "check for merge conflicts",
            "description": "checks for files that contain merge conflict strings.",
            "entry": "check-merge-conflict",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-symlinks",
            "name": "check for broken symlinks",
            "description": "checks for symlinks which do not point to anything.",
            "entry": "check-symlinks",
            "language": "python",
            "types": [
                "symlink"
            ]
        },
        {
            "id": "check-toml",
            "name": "check toml",
            "description": "checks toml files for parseable syntax.",
            "entry": "check-toml",
            "language": "python",
            "types": [
                "toml"
            ]
        },
        {
            "id": "check-vcs-permalinks",
            "name": "check vcs permalinks",
            "description": "ensures that links to vcs websites are permalinks.",
            "entry": "check-vcs-permalinks",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-xml",
            "name": "check xml",
            "description": "checks xml files for parseable syntax.",
            "entry": "check-xml",
            "language": "python",
            "types": [
                "xml"
            ]
        },
        {
            "id": "check-yaml",
            "name": "check yaml",
            "description": "checks yaml files for parseable syntax.",
            "entry": "check-yaml",
            "language": "python",
            "types": [
                "yaml"
            ]
        },
        {
            "id": "debug-statements",
            "name": "debug statements (python)",
            "description": "checks for debugger imports and py37+ `breakpoint()` calls in python source.",
            "entry": "debug-statement-hook",
            "language": "python",
            "types": [
                "python"
            ]
        },
        {
            "id": "destroyed-symlinks",
            "name": "detect destroyed symlinks",
            "description": "detects symlinks which are changed to regular files with a content of a path which that symlink was pointing to.",
            "entry": "destroyed-symlinks",
            "language": "python",
            "types": [
                "file"
            ]
        },
        {
            "id": "detect-aws-credentials",
            "name": "detect aws credentials",
            "description": "detects *your* aws credentials from the aws cli credentials file.",
            "entry": "detect-aws-credentials",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "detect-private-key",
            "name": "detect private key",
            "description": "detects the presence of private keys.",
            "entry": "detect-private-key",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "double-quote-string-fixer",
            "name": "fix double quoted strings",
            "description": "replaces double quoted strings with single quoted strings.",
            "entry": "double-quote-string-fixer",
            "language": "python",
            "types": [
                "python"
            ]
        },
        {
            "id": "end-of-file-fixer",
            "name": "fix end of files",
            "description": "ensures that a file is either empty, or ends with one newline.",
            "entry": "end-of-file-fixer",
            "language": "python",
            "types": [
                "text"
            ],
            "stages": [
                "commit",
                "push",
                "manual"
            ]
        },
        {
            "id": "file-contents-sorter",
            "name": "file contents sorter",
            "description": "sorts the lines in specified files (defaults to alphabetical). you must provide list of target files as input in your .pre-commit-config.yaml file.",
            "entry": "file-contents-sorter",
            "language": "python",
            "files": "^$"
        },
        {
            "id": "fix-byte-order-marker",
            "name": "fix utf-8 byte order marker",
            "description": "removes utf-8 byte order marker.",
            "entry": "fix-byte-order-marker",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "fix-encoding-pragma",
            "name": "fix python encoding pragma (deprecated)",
            "description": "adds # -*- coding: utf-8 -*- to the top of python files.",
            "language": "python",
            "entry": "fix-encoding-pragma",
            "types": [
                "python"
            ]
        },
        {
            "id": "forbid-new-submodules",
            "name": "forbid new submodules",
            "description": "prevents addition of new git submodules.",
            "language": "python",
            "entry": "forbid-new-submodules",
            "types": [
                "directory"
            ]
        },
        {
            "id": "forbid-submodules",
            "name": "forbid submodules",
            "description": "forbids any submodules in the repository",
            "language": "fail",
            "entry": "submodules are not allowed in this repository:",
            "types": [
                "directory"
            ]
        },
        {
            "id": "mixed-line-ending",
            "name": "mixed line ending",
            "description": "replaces or checks mixed line ending.",
            "entry": "mixed-line-ending",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "name-tests-test",
            "name": "python tests naming",
            "description": "verifies that test files are named correctly.",
            "entry": "name-tests-test",
            "language": "python",
            "files": "(^|/)tests/.+\\.py$"
        },
        {
            "id": "no-commit-to-branch",
            "name": "don't commit to branch",
            "entry": "no-commit-to-branch",
            "language": "python",
            "pass_filenames": false,
            "always_run": true
        },
        {
            "id": "requirements-txt-fixer",
            "name": "fix requirements.txt",
            "description": "sorts entries in requirements.txt.",
            "entry": "requirements-txt-fixer",
            "language": "python",
            "files": "(requirements|constraints).*\\.txt$"
        },
        {
            "id": "sort-simple-yaml",
            "name": "sort simple yaml files",
            "description": "sorts simple yaml files which consist only of top-level keys, preserving comments and blocks.",
            "language": "python",
            "entry": "sort-simple-yaml",
            "files": "^$"
        },
        {
            "id": "trailing-whitespace",
            "name": "trim trailing whitespace",
            "description": "trims trailing whitespace.",
            "entry": "trailing-whitespace-fixer",
            "language": "python",
            "types": [
                "text"
            ],
            "stages": [
                "commit",
                "push",
                "manual"
            ]
        }
    ],
    "https://github.com/pre-commit/mirrors-clang-format": [
        {
            "id": "clang-format",
            "name": "clang-format",
            "description": "",
            "entry": "clang-format -i",
            "language": "python",
            "types_or": [
                "c++",
                "c",
                "c#",
                "cuda",
                "java",
                "javascript",
                "json",
                "objective-c",
                "proto",
                "textproto",
                "metal"
            ],
            "args": [
                "-style=file"
            ],
            "require_serial": false,
            "additional_dependencies": [],
            "minimum_pre_commit_version": "2.9.2"
        }
    ],
    "https://github.com/pre-commit/mirrors-csslint": [
        {
            "id": "csslint",
            "name": "csslint",
            "entry": "csslint",
            "language": "node",
            "files": "\\.css$",
            "args": [],
            "additional_dependencies": [
                "csslint@1.0.5"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/pre-commit/mirrors-eslint": [
        {
            "id": "eslint",
            "name": "eslint",
            "description": "",
            "entry": "eslint",
            "language": "node",
            "types": [
                "javascript"
            ],
            "args": [],
            "require_serial": false,
            "additional_dependencies": [
                "eslint@9.3.0"
            ],
            "minimum_pre_commit_version": "0"
        }
    ],
    "https://github.com/pre-commit/mirrors-fixmyjs": [
        {
            "id": "fixmyjs",
            "name": "fixmyjs",
            "entry": "fixmyjs",
            "language": "node",
            "files": "\\.js$",
            "args": [],
            "additional_dependencies": [
                "fixmyjs@2.0.0"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/pre-commit/mirrors-jshint": [
        {
            "id": "jshint",
            "name": "jshint",
            "description": "",
            "entry": "jshint",
            "language": "node",
            "types": [
                "javascript"
            ],
            "args": [],
            "require_serial": false,
            "additional_dependencies": [
                "jshint@2.13.6"
            ],
            "minimum_pre_commit_version": "0"
        }
    ],
    "https://github.com/pre-commit/mirrors-mypy": [
        {
            "id": "mypy",
            "name": "mypy",
            "description": "",
            "entry": "mypy",
            "language": "python",
            "types_or": [
                "python",
                "pyi"
            ],
            "args": [
                "--ignore-missing-imports",
                "--scripts-are-modules"
            ],
            "require_serial": true,
            "additional_dependencies": [],
            "minimum_pre_commit_version": "2.9.2"
        }
    ],
    "https://github.com/pre-commit/mirrors-puppet-lint": [
        {
            "id": "puppet-lint",
            "name": "puppet-lint",
            "description": "",
            "entry": "puppet-lint",
            "language": "ruby",
            "types": [
                "puppet"
            ],
            "args": [],
            "require_serial": false,
            "additional_dependencies": [],
            "minimum_pre_commit_version": "0"
        }
    ],
    "https://github.com/pre-commit/mirrors-scss-lint": [
        {
            "id": "scss-lint",
            "name": "scss_lint",
            "description": "",
            "entry": "scss-lint",
            "language": "ruby",
            "types": [
                "scss"
            ],
            "args": [],
            "require_serial": false,
            "additional_dependencies": [],
            "minimum_pre_commit_version": "0"
        }
    ],
    "https://github.com/pre-commit/mirrors-yapf": [
        {
            "id": "yapf",
            "name": "yapf",
            "entry": "yapf",
            "language": "python",
            "types": [
                "python"
            ],
            "args": [
                "-i"
            ],
            "require_serial": false,
            "additional_dependencies": [],
            "minimum_pre_commit_version": "0"
        }
    ],
    "https://github.com/pre-commit/pygrep-hooks": [
        {
            "id": "python-check-blanket-noqa",
            "name": "check blanket noqa",
            "description": "Enforce that `noqa` annotations always occur with specific codes. Sample annotations: `# noqa: F401`, `# noqa: F401,W203`",
            "entry": "(?i)# noqa(?!: )",
            "language": "pygrep",
            "types": [
                "python"
            ]
        },
        {
            "id": "python-check-blanket-type-ignore",
            "name": "check blanket type ignore",
            "description": "Enforce that `# type: ignore` annotations always occur with specific codes. Sample annotations: `# type: ignore[attr-defined]`, `# type: ignore[attr-defined, name-defined]`",
            "entry": "# type:? *ignore(?!\\[|\\w)",
            "language": "pygrep",
            "types": [
                "python"
            ]
        },
        {
            "id": "python-check-mock-methods",
            "name": "check for not-real mock methods",
            "description": "Prevent common mistakes of `assert mck.not_called()`, `assert mck.called_once_with(...)` and `mck.assert_called`.",
            "language": "pygrep",
            "entry": "(?x)(\n    assert .*\\.(\n        not_called|\n        called_\n    )|\n    # ''.join(rf'(?<!\\b{s})' for s in dir(mock) if s.endswith('Mock')))\n    (?<!\\bAsyncMock)(?<!\\bMagicMock)(?<!\\bMock)(?<!\\bNonCallableMagicMock)(?<!\\bNonCallableMock)(?<!\\bPropertyMock)\n    \\.assert_(\n        any_call|\n        called|\n        called_once|\n        called_once_with|\n        called_with|\n        has_calls|\n        not_called\n    )($|[^(\\w])\n)\n",
            "types": [
                "python"
            ]
        },
        {
            "id": "python-no-eval",
            "name": "check for eval()",
            "description": "A quick check for the `eval()` built-in function",
            "entry": "\\beval\\(",
            "language": "pygrep",
            "types": [
                "python"
            ]
        },
        {
            "id": "python-no-log-warn",
            "name": "use logger.warning(",
            "description": "A quick check for the deprecated `.warn()` method of python loggers",
            "entry": "(?<!warnings)\\.warn\\(",
            "language": "pygrep",
            "types": [
                "python"
            ]
        },
        {
            "id": "python-use-type-annotations",
            "name": "type annotations not comments",
            "description": "Enforce that python3.6+ type annotations are used instead of type comments",
            "entry": "# type(?!: *ignore([^a-zA-Z0-9]|$))",
            "language": "pygrep",
            "types": [
                "python"
            ]
        },
        {
            "id": "rst-backticks",
            "name": "rst ``code`` is two backticks",
            "description": "Detect common mistake of using single backticks when writing rst",
            "entry": "^(?!    ).*(^| )`[^`]+`([^_]|$)",
            "language": "pygrep",
            "types": [
                "rst"
            ]
        },
        {
            "id": "rst-directive-colons",
            "name": "rst directives end with two colons",
            "description": "Detect mistake of rst directive not ending with double colon or space before the double colon",
            "entry": "^\\s*\\.\\. [a-z]+(| | :):$",
            "language": "pygrep",
            "types": [
                "rst"
            ]
        },
        {
            "id": "rst-inline-touching-normal",
            "name": "rst ``inline code`` next to normal text",
            "description": "Detect mistake of inline code touching normal text in rst",
            "entry": "\\w``\\w",
            "language": "pygrep",
            "types": [
                "rst"
            ]
        },
        {
            "id": "text-unicode-replacement-char",
            "name": "no unicode replacement chars",
            "description": "Forbid files which have a UTF-8 Unicode replacement character",
            "entry": "\ufffd",
            "language": "pygrep",
            "types": [
                "text"
            ]
        }
    ],
    "https://github.com/pre-commit/sync-pre-commit-deps": [
        {
            "id": "sync-pre-commit-deps",
            "name": "sync-pre-commit-deps",
            "description": "Sync pre-commit hook dependencies based on other installed hooks",
            "entry": "sync-pre-commit-deps",
            "language": "python",
            "language_version": "python3",
            "files": "^\\.pre-commit-config.yaml$"
        }
    ],
    "https://github.com/FalconSocial/pre-commit-mirrors-pep257": [
        {
            "id": "pep257",
            "name": "pep257",
            "entry": "pep257",
            "language": "python",
            "files": "\\.py$"
        }
    ],
    "https://github.com/FalconSocial/pre-commit-python-sorter": [
        {
            "id": "python-import-sorter",
            "name": "Sort python imports",
            "description": "This hook sorts python imports.",
            "entry": "python-import-sorter",
            "language": "python",
            "files": "\\.py$"
        }
    ],
    "https://github.com/MarketSquare/robotframework-tidy": [
        {
            "id": "robotidy",
            "name": "robotidy",
            "entry": "robotidy",
            "files": ".*\\.(robot|resource)$",
            "language": "python",
            "description": "RobotFramework source code formatter"
        }
    ],
    "https://github.com/guykisel/prospector-mirror": [
        {
            "id": "prospector",
            "name": "prospector",
            "description": "This hook runs Prospector: https://github.com/landscapeio/prospector",
            "entry": "prospector",
            "language": "python",
            "files": "\\.py$"
        }
    ],
    "https://github.com/asottile/add-trailing-comma": [
        {
            "id": "add-trailing-comma",
            "name": "Add trailing commas",
            "description": "Automatically add trailing commas to calls and literals.",
            "entry": "add-trailing-comma",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/asottile/pyupgrade": [
        {
            "id": "pyupgrade",
            "name": "pyupgrade",
            "description": "Automatically upgrade syntax for newer versions.",
            "entry": "pyupgrade",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        }
    ],
    "https://github.com/asottile/reorder-python-imports": [
        {
            "id": "reorder-python-imports",
            "name": "Reorder python imports",
            "description": "This hook reorders imports in python files.",
            "entry": "reorder-python-imports",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        }
    ],
    "https://github.com/asottile/yesqa": [
        {
            "id": "yesqa",
            "name": "Strip unnecessary `# noqa`s",
            "description": "Automatically remove unnecessary `# noqa` comments",
            "entry": "yesqa",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/asottile/dead": [
        {
            "id": "dead",
            "name": "detect dead code",
            "description": "dead simple python dead code detection",
            "entry": "dead",
            "pass_filenames": false,
            "language": "python",
            "language_version": "python3",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/asottile/setup-cfg-fmt": [
        {
            "id": "setup-cfg-fmt",
            "name": "setup-cfg-fmt",
            "description": "apply a consistent format to `setup.cfg` files",
            "entry": "setup-cfg-fmt",
            "language": "python",
            "language_version": "python3",
            "files": "(^|/)setup\\.cfg$"
        }
    ],
    "https://github.com/asottile/cheetah_lint": [
        {
            "id": "cheetah-reorder-imports",
            "name": "Reorder cheetah imports",
            "description": "This hook reorders imports in cheetah files.",
            "entry": "cheetah-reorder-imports",
            "language": "python",
            "files": "\\.tmpl$"
        },
        {
            "id": "cheetah-flake",
            "name": "Cheetah flake",
            "description": "Lint cheetah code using flake8 and some other checks.",
            "entry": "cheetah-flake",
            "language": "python",
            "files": "\\.tmpl$"
        }
    ],
    "https://github.com/digitalpulp/pre-commit-php": [
        {
            "id": "php-lint-all",
            "name": "PHP Syntax Check (Comprehensive)",
            "description": "Check PHP Syntax on ALL PHP staged files with user friendly messages and colors",
            "entry": "pre_commit_hooks/php-lint.sh",
            "language": "script",
            "files": "\\.php$",
            "args": [
                "-s all"
            ]
        },
        {
            "id": "php-lint",
            "name": "PHP Syntax Check (Quick)",
            "description": "Runs php -l on all staged PHP files. Exits when it hits the first errored file",
            "entry": "php -l",
            "language": "system",
            "files": "\\.php$"
        },
        {
            "id": "php-unit",
            "name": "PHP Unit",
            "description": "Run the full php unit test. Checks which PHPUnit executable is available first and then runs it. Preference order is vendor/bin, phpunit and phpunit.phar.",
            "entry": "pre_commit_hooks/php-unit.sh",
            "language": "script",
            "files": "\\.php$"
        },
        {
            "id": "php-cs",
            "name": "PHP Codesniffer",
            "description": "Run php codesniffer against all staged PHP files.",
            "entry": "pre_commit_hooks/php-cs.sh",
            "language": "script",
            "files": "\\.php$"
        },
        {
            "id": "php-cbf",
            "name": "PHP Codesniffer (Code Beutifier and Formatter)",
            "description": "Run php codesniffer against all staged PHP files.",
            "entry": "pre_commit_hooks/php-cbf.sh",
            "language": "script",
            "files": "\\.php$"
        },
        {
            "id": "php-cs-fixer",
            "name": "PHP Coding Standards Fixer",
            "description": "Run php coding standards fixer against all staged PHP files.",
            "entry": "pre_commit_hooks/php-cs-fixer.sh",
            "language": "script",
            "files": "\\.php$"
        },
        {
            "id": "php-stan",
            "name": "PHPStan",
            "description": "Run PHPStan against all staged PHP files.",
            "entry": "pre_commit_hooks/php-stan.sh",
            "language": "script",
            "files": "\\.php$"
        }
    ],
    "https://github.com/elidupuis/mirrors-jscs": [
        {
            "id": "jscs",
            "name": "jscs",
            "entry": "jscs",
            "language": "node",
            "files": "\\.js$",
            "args": [],
            "additional_dependencies": [
                "jscs@3.0.7"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/elidupuis/mirrors-sass-lint": [
        {
            "id": "sass-lint",
            "name": "sass-lint",
            "entry": "sass-lint",
            "language": "node",
            "files": "\\.(scss|sass)$",
            "args": [],
            "additional_dependencies": [
                "sass-lint@1.12.0"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/jumanjihouse/pre-commit-hook-yamlfmt": [
        {
            "id": "yamlfmt",
            "name": "Format YAML files",
            "description": "Format YAML files",
            "entry": "yamlfmt",
            "language": "python",
            "types": [
                "yaml"
            ]
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks": [
        {
            "id": "forbid-crlf",
            "name": "CRLF end-lines checker",
            "description": "Forbid files containing CRLF end-lines to be committed",
            "entry": "forbid_crlf",
            "language": "python",
            "types": [
                "text"
            ],
            "stages": [
                "pre-commit",
                "pre-push",
                "pre-merge-commit"
            ],
            "minimum_pre_commit_version": "3.2.0"
        },
        {
            "id": "remove-crlf",
            "name": "CRLF end-lines remover",
            "description": "Replace CRLF end-lines by LF ones before committing",
            "entry": "remove_crlf",
            "language": "python",
            "types": [
                "text"
            ],
            "stages": [
                "pre-commit",
                "pre-push",
                "pre-merge-commit"
            ],
            "minimum_pre_commit_version": "3.2.0"
        },
        {
            "id": "forbid-tabs",
            "name": "No-tabs checker",
            "description": "Forbid files containing tabs to be committed",
            "entry": "forbid_tabs",
            "language": "python",
            "types": [
                "text"
            ],
            "exclude": "(Makefile|debian/rules|.gitmodules)(\\.in)?$",
            "stages": [
                "pre-commit",
                "pre-push",
                "pre-merge-commit"
            ],
            "minimum_pre_commit_version": "3.2.0"
        },
        {
            "id": "remove-tabs",
            "name": "Tabs remover",
            "description": "Replace tabs by whitespaces before committing",
            "entry": "remove_tabs",
            "language": "python",
            "args": [
                "--whitespaces-count",
                "4"
            ],
            "types": [
                "text"
            ],
            "exclude": "(Makefile|debian/rules|.gitmodules)(\\.in)?$",
            "stages": [
                "pre-commit",
                "pre-push",
                "pre-merge-commit"
            ],
            "minimum_pre_commit_version": "3.2.0"
        },
        {
            "id": "chmod",
            "name": "Set file permissions",
            "entry": "pre_commit_chmod",
            "language": "python"
        },
        {
            "id": "insert-license",
            "name": "Insert license in comments",
            "description": "Insert a short license disclaimer as a header comment in source files",
            "entry": "insert_license",
            "language": "python",
            "types": [
                "text"
            ]
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-lxml": [
        {
            "id": "forbid-html-img-without-alt-text",
            "name": "HTML img tag alt text checker",
            "description": "List every <img> tag without a alt= or data-ng-attr-alt= attribute",
            "entry": "forbid_html_img_without_alt_text",
            "language": "python",
            "files": ".*\\.(html|hbs)$"
        },
        {
            "id": "forbid-non-std-html-attributes",
            "name": "Non-standard HTML attributes checker",
            "description": "Detect any non-standard attribute that is not prefixed with data-",
            "entry": "forbid_non_std_html_attributes",
            "language": "python",
            "args": [
                "--extra-known-attributes",
                "content,http-equiv,placeholder,role,style"
            ],
            "files": ".*\\.(html|hbs)$"
        },
        {
            "id": "detect-missing-css-classes",
            "name": "Missing CSS classes checker",
            "description": "Detect unused or missing CSS classes definitions, and abort if any of the later ones is found",
            "entry": "detect_missing_css_classes",
            "language": "python",
            "files": ".*\\.(css|hbs|html)$"
        },
        {
            "id": "html-tags-blacklist",
            "name": "Forbid some HTML tags",
            "entry": "html_tags_blacklist",
            "language": "python",
            "args": [
                "--forbidden-tags",
                "basefont,blink,center,font,marquee,s,strike,tt,u"
            ],
            "files": "\\.(html|hbs)$"
        },
        {
            "id": "html-attributes-blacklist",
            "name": "Forbid some HTML attributes",
            "entry": "html_attributes_blacklist",
            "language": "python",
            "args": [
                "--forbidden-attributes",
                "align,alink,background,basefont,bgcolor,border,color,link,text,vlink"
            ],
            "files": "\\.(html|hbs)$"
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-safety": [
        {
            "id": "python-safety-dependencies-check",
            "name": "safety",
            "description": "Analyze your Python requirements for known security vulnerabilities",
            "entry": "safety_check",
            "language": "python",
            "files": "pyproject\\.toml|requirements"
        }
    ],
    "https://github.com/chriskuehl/puppet-pre-commit-hooks": [
        {
            "id": "bolt-validate",
            "additional_dependencies": [
                "puppet"
            ],
            "description": "Validate syntax of Bolt plans",
            "entry": "bolt-validate",
            "files": "plans/\\w+\\.pp$",
            "language": "ruby",
            "name": "Validate Bolt plans"
        },
        {
            "id": "epp-validate",
            "additional_dependencies": [
                "puppet"
            ],
            "description": "Validate syntax of Puppet EPP templates",
            "entry": "epp-validate",
            "files": "\\.epp$",
            "language": "ruby",
            "name": "Validate EPP templates"
        },
        {
            "id": "erb-validate",
            "description": "Validate syntax of Ruby ERB templates",
            "entry": "erb-validate",
            "files": "\\.erb$",
            "language": "ruby",
            "name": "Validate ERB templates"
        },
        {
            "id": "g10k-validate",
            "description": "Validate syntax of Puppetfile using g10k",
            "entry": "g10k-validate",
            "files": "Puppetfile$",
            "language": "ruby",
            "name": "Validate g10k Puppetfile"
        },
        {
            "id": "puppet-lint",
            "additional_dependencies": [
                "puppet-lint"
            ],
            "description": "Check Puppet manifests for stylistic problems",
            "entry": "puppet-lint",
            "files": "\\.pp$",
            "language": "ruby",
            "name": "puppet-lint"
        },
        {
            "id": "puppet-validate",
            "additional_dependencies": [
                "puppet"
            ],
            "description": "Validate syntax of Puppet manifests",
            "entry": "puppet-validate",
            "files": "\\.pp$",
            "exclude": "plans/",
            "language": "ruby",
            "name": "Validate Puppet manifests"
        },
        {
            "id": "r10k-validate",
            "additional_dependencies": [
                "r10k"
            ],
            "description": "Validate syntax of Puppetfile using r10k",
            "entry": "r10k-validate",
            "files": "Puppetfile$",
            "language": "ruby",
            "name": "Validate r10k Puppetfile"
        },
        {
            "id": "ruby-validate",
            "additional_dependencies": [
                "ruby"
            ],
            "description": "Validate syntax of ruby code",
            "entry": "ruby-validate",
            "files": "\\.rb$",
            "language": "ruby",
            "name": "Validate ruby syntax"
        }
    ],
    "https://github.com/golangci/golangci-lint": [
        {
            "id": "golangci-lint",
            "name": "golangci-lint",
            "description": "Fast linters runner for Go. Note that only modified files are linted, so linters like 'unused' that need to scan all files won't work as expected.",
            "entry": "golangci-lint run --new-from-rev HEAD --fix",
            "types": [
                "go"
            ],
            "language": "golang",
            "require_serial": true,
            "pass_filenames": false
        },
        {
            "id": "golangci-lint-full",
            "name": "golangci-lint-full",
            "description": "Fast linters runner for Go. Runs on all files in the repo. Use this hook if you use pre-commit in CI.",
            "entry": "golangci-lint run --fix",
            "types": [
                "go"
            ],
            "language": "golang",
            "require_serial": true,
            "pass_filenames": false
        },
        {
            "id": "golangci-lint-config-verify",
            "name": "golangci-lint-config-verify",
            "description": "Verifies the configuration file",
            "entry": "golangci-lint config verify",
            "files": "\\.golangci\\.(?:yml|yaml|toml|json)",
            "language": "golang",
            "pass_filenames": false
        }
    ],
    "https://github.com/Bahjat/pre-commit-golang": [
        {
            "id": "go-fmt-import",
            "name": "go import/fmt",
            "entry": "run-go-fmt-import.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `goimport,gofmt`, requires golang"
        },
        {
            "id": "go-vet",
            "name": "go vet",
            "entry": "run-go-vet.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go vet`, requires golang"
        },
        {
            "id": "go-lint",
            "name": "golint",
            "entry": "run-go-lint.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go lint`, requires golang"
        },
        {
            "id": "go-unit-tests",
            "name": "go unit test",
            "entry": "run-go-unit-tests.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go test`, requires golang"
        },
        {
            "id": "gofumpt",
            "name": "gofumpt",
            "entry": "run-go-gofumpt.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `gofumpt`, requires github.com/mvdan/gofumpt"
        },
        {
            "id": "go-err-check",
            "name": "go errcheck",
            "entry": "run-go-err-check.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `errcheck`, requires github.com/kisielk/errcheck"
        },
        {
            "id": "go-static-check",
            "name": "go staticcheck",
            "entry": "run-go-static-check.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `staticcheck`, install https://staticcheck.io/docs/"
        },
        {
            "id": "golangci-lint",
            "name": "go golangci-lint",
            "entry": "run-golangci-lint.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `golangci-lint`, install https://github.com/golangci/golangci-lint"
        },
        {
            "id": "go-ruleguard",
            "name": "go-ruleguard",
            "entry": "run-go-ruleguard.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go-ruleguard`, install https://github.com/quasilyte/go-ruleguard"
        }
    ],
    "https://github.com/dnephin/pre-commit-golang": [
        {
            "id": "go-fmt",
            "name": "go fmt",
            "entry": "run-go-fmt.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `gofmt`, requires golang"
        },
        {
            "id": "go-imports",
            "name": "go imports",
            "entry": "run-go-imports.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `goimports`, requires golang"
        },
        {
            "id": "go-vet",
            "name": "go vet",
            "entry": "run-go-vet.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go vet`, requires golang"
        },
        {
            "id": "go-lint",
            "name": "go lint",
            "entry": "run-go-lint.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `golint`, requires https://github.com/golang/lint"
        },
        {
            "id": "go-cyclo",
            "name": "go-cyclo",
            "entry": "run-go-cyclo.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `gocyclo`, requires https://github.com/fzipp/gocyclo",
            "args": [
                "-over=15"
            ]
        },
        {
            "id": "validate-toml",
            "name": "validate toml",
            "entry": "tomlv",
            "files": "\\.toml$",
            "language": "system",
            "description": "Runs `tomlv`, requires https://github.com/BurntSushi/toml/tree/master/cmd/tomlv\"\n"
        },
        {
            "id": "no-go-testing",
            "name": "Check files aren't using go's testing package",
            "entry": "testing\\.T",
            "files": "test_.*\\.go$",
            "language": "pygrep",
            "description": "Checks that no files are using `testing.T`, if you want developers to use a different testing framework\n"
        },
        {
            "id": "gometalinter",
            "name": "gometalinter",
            "entry": "run-gometalinter.sh",
            "files": "\\.go$",
            "language": "script",
            "description": ""
        },
        {
            "id": "golangci-lint",
            "name": "golangci-lint",
            "entry": "run-golangci-lint.sh",
            "types": [
                "go"
            ],
            "language": "script",
            "pass_filenames": false,
            "description": "Runs `golangci-lint`, requires https://github.com/golangci/golangci-lint"
        },
        {
            "id": "go-critic",
            "name": "go-critic",
            "entry": "run-go-critic.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go-critic`, requires https://github.com/go-critic/go-critic"
        },
        {
            "id": "go-unit-tests",
            "name": "go-unit-tests",
            "entry": "run-go-unit-tests.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go test`"
        },
        {
            "id": "go-build",
            "name": "go-build",
            "entry": "run-go-build.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go build`, requires golang"
        },
        {
            "id": "go-generate",
            "name": "go-generate",
            "entry": "run-go-generate.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go generate`, requires golang"
        },
        {
            "id": "go-mod-tidy",
            "name": "go-mod-tidy",
            "entry": "run-go-mod-tidy.sh",
            "pass_filenames": false,
            "language": "script",
            "description": "Runs `go mod tidy -v`, requires golang"
        },
        {
            "id": "go-mod-vendor",
            "name": "go-mod-vendor",
            "entry": "run-go-mod-vendor.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go mod vendor`, requires golang"
        }
    ],
    "https://github.com/troian/pre-commit-golang": [
        {
            "id": "go-fmt",
            "name": "go fmt",
            "entry": "run-go-fmt.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `gofmt`, requires golang"
        },
        {
            "id": "go-imports",
            "name": "go imports",
            "entry": "run-goimports.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `goimports`, requires golang"
        },
        {
            "id": "go-vet",
            "name": "go vet",
            "entry": "run-go-vet.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go vet`, requires golang"
        },
        {
            "id": "go-lint",
            "name": "go lint",
            "entry": "run-go-lint.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `golint`, requires https://github.com/golang/lint"
        },
        {
            "id": "go-metalinter",
            "name": "go metalinter",
            "entry": "run-go-metalinter.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `gometalinter`, requires https://github.com/alecthomas/gometalinter"
        },
        {
            "id": "go-build",
            "name": "go build",
            "description": "Makes sure Go code can build",
            "entry": "run-go-build.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "go-build-plugin",
            "name": "go build plugin",
            "description": "Makes sure Go code can build package as plugin",
            "entry": "run-go-build-plugin.sh",
            "language": "script",
            "files": "\\.go$"
        }
    ],
    "https://github.com/jstewmon/check-swagger": [
        {
            "id": "check-swagger",
            "name": "check-swagger",
            "entry": "check-swagger",
            "description": "Hook to validate swagger specs.",
            "language": "python",
            "files": ".*swagger.*\\.(json|yaml|yml)"
        }
    ],
    "https://github.com/detailyang/pre-commit-shell": [
        {
            "id": "shell-lint",
            "name": "Shell Syntax Check",
            "description": "Check Shell Syntax on ALL staged files with user friendly messages and colors",
            "entry": "pre_commit_hooks/shell-lint.sh",
            "language": "script",
            "types": [
                "shell"
            ]
        }
    ],
    "https://github.com/lovesegfault/beautysh": [
        {
            "id": "beautysh",
            "name": "beautysh",
            "description": "A Bash beautifier for the masses.\nhttps://pypi.python.org/pypi/beautysh\n",
            "entry": "beautysh",
            "language": "python",
            "types": [
                "shell"
            ]
        }
    ],
    "https://github.com/antonbabenko/pre-commit-terraform": [
        {
            "id": "infracost_breakdown",
            "name": "Infracost breakdown",
            "description": "Check terraform infrastructure cost",
            "entry": "hooks/infracost_breakdown.sh",
            "language": "script",
            "require_serial": true,
            "files": "\\.(tf(vars)?|hcl)$",
            "exclude": "\\.terraform/.*$"
        },
        {
            "id": "terraform_fmt",
            "name": "Terraform fmt",
            "description": "Rewrites all Terraform configuration files to a canonical format.",
            "entry": "hooks/terraform_fmt.sh",
            "language": "script",
            "files": "(\\.tf|\\.tfvars)$",
            "exclude": "\\.terraform/.*$"
        },
        {
            "id": "terraform_docs",
            "name": "Terraform docs",
            "description": "Inserts input and output documentation into README.md (using terraform-docs).",
            "require_serial": true,
            "entry": "hooks/terraform_docs.sh",
            "language": "script",
            "files": "(\\.tf|\\.terraform\\.lock\\.hcl)$",
            "exclude": "\\.terraform/.*$"
        },
        {
            "id": "terraform_docs_without_aggregate_type_defaults",
            "name": "Terraform docs (without aggregate type defaults)",
            "description": "Inserts input and output documentation into README.md (using terraform-docs). Identical to terraform_docs.",
            "require_serial": true,
            "entry": "hooks/terraform_docs.sh",
            "language": "script",
            "files": "(\\.tf)$",
            "exclude": "\\.terraform/.*$"
        },
        {
            "id": "terraform_docs_replace",
            "name": "Terraform docs (overwrite README.md)",
            "description": "Overwrite content of README.md with terraform-docs.",
            "require_serial": true,
            "entry": "terraform_docs_replace",
            "language": "python",
            "files": "(\\.tf)$",
            "exclude": "\\.terraform/.*$"
        },
        {
            "id": "terraform_validate",
            "name": "Terraform validate",
            "description": "Validates all Terraform configuration files.",
            "require_serial": true,
            "entry": "hooks/terraform_validate.sh",
            "language": "script",
            "files": "\\.(tf(vars)?|terraform\\.lock\\.hcl)$",
            "exclude": "\\.terraform/.*$"
        },
        {
            "id": "terraform_providers_lock",
            "name": "Lock terraform provider versions",
            "description": "Updates provider signatures in dependency lock files.",
            "require_serial": true,
            "entry": "hooks/terraform_providers_lock.sh",
            "language": "script",
            "files": "(\\.terraform\\.lock\\.hcl)$",
            "exclude": "\\.terraform/.*$"
        },
        {
            "id": "terraform_tflint",
            "name": "Terraform validate with tflint",
            "description": "Validates all Terraform configuration files with TFLint.",
            "require_serial": true,
            "entry": "hooks/terraform_tflint.sh",
            "language": "script",
            "files": "(\\.tf|\\.tfvars)$",
            "exclude": "\\.terraform/.*$"
        },
        {
            "id": "terragrunt_fmt",
            "name": "Terragrunt fmt",
            "description": "Rewrites all Terragrunt configuration files to a canonical format.",
            "entry": "hooks/terragrunt_fmt.sh",
            "language": "script",
            "files": "(\\.hcl)$",
            "exclude": "\\.terraform/.*$"
        },
        {
            "id": "terragrunt_validate",
            "name": "Terragrunt validate",
            "description": "Validates all Terragrunt configuration files.",
            "entry": "hooks/terragrunt_validate.sh",
            "language": "script",
            "files": "(\\.hcl)$",
            "exclude": "\\.terraform/.*$"
        },
        {
            "id": "terragrunt_providers_lock",
            "name": "Terragrunt providers lock",
            "description": "Updates provider signatures in dependency lock files using terragrunt.",
            "entry": "hooks/terragrunt_providers_lock.sh",
            "language": "script",
            "files": "(terragrunt|\\.terraform\\.lock)\\.hcl$",
            "exclude": "\\.(terraform/.*|terragrunt-cache)$"
        },
        {
            "id": "terraform_tfsec",
            "name": "Terraform validate with tfsec (deprecated, use \"terraform_trivy\")",
            "description": "Static analysis of Terraform templates to spot potential security issues.",
            "require_serial": true,
            "entry": "hooks/terraform_tfsec.sh",
            "files": "\\.tf(vars)?$",
            "language": "script"
        },
        {
            "id": "terraform_trivy",
            "name": "Terraform validate with trivy",
            "description": "Static analysis of Terraform templates to spot potential security issues.",
            "require_serial": true,
            "entry": "hooks/terraform_trivy.sh",
            "files": "\\.tf(vars)?$",
            "language": "script"
        },
        {
            "id": "checkov",
            "name": "checkov (deprecated, use \"terraform_checkov\")",
            "description": "Runs checkov on Terraform templates.",
            "entry": "checkov -d .",
            "language": "python",
            "pass_filenames": false,
            "always_run": false,
            "files": "\\.tf$",
            "exclude": "\\.terraform/.*$",
            "require_serial": true
        },
        {
            "id": "terraform_checkov",
            "name": "Checkov",
            "description": "Runs checkov on Terraform templates.",
            "entry": "hooks/terraform_checkov.sh",
            "language": "script",
            "always_run": false,
            "files": "\\.tf$",
            "exclude": "\\.terraform/.*$",
            "require_serial": true
        },
        {
            "id": "terraform_wrapper_module_for_each",
            "name": "Terraform wrapper with for_each in module",
            "description": "Generate Terraform wrappers with for_each in module.",
            "entry": "hooks/terraform_wrapper_module_for_each.sh",
            "language": "script",
            "pass_filenames": false,
            "always_run": false,
            "require_serial": true,
            "files": "\\.tf$",
            "exclude": "\\.terraform/.*$"
        },
        {
            "id": "terrascan",
            "name": "terrascan",
            "description": "Runs terrascan on Terraform templates.",
            "language": "script",
            "entry": "hooks/terrascan.sh",
            "files": "\\.tf$",
            "exclude": "\\.terraform/.*$",
            "require_serial": true
        },
        {
            "id": "tfupdate",
            "name": "tfupdate",
            "description": "Runs tfupdate on Terraform templates.",
            "language": "script",
            "entry": "hooks/tfupdate.sh",
            "args": [
                "--args=terraform"
            ],
            "files": "\\.tf$",
            "require_serial": true
        }
    ],
    "https://github.com/ansible-community/ansible-lint": [
        {
            "id": "ansible-lint",
            "name": "Ansible-lint",
            "description": "This hook runs ansible-lint.",
            "entry": "python3 -m ansiblelint -v --force-color",
            "language": "python",
            "pass_filenames": false,
            "always_run": true,
            "additional_dependencies": [
                "ansible-core>=2.13.3"
            ]
        }
    ],
    "https://github.com/doublify/pre-commit-clang-format": [
        {
            "id": "clang-format",
            "name": "clang-format",
            "description": "Format files with ClangFormat.",
            "entry": "clang-format -i",
            "language": "system",
            "files": "\\.(c|cc|cxx|cpp|frag|glsl|h|hpp|hxx|ih|ispc|ipp|java|js|m|mm|proto|textproto|vert)$",
            "args": [
                "-fallback-style=none"
            ]
        }
    ],
    "https://github.com/doublify/pre-commit-go": [
        {
            "id": "fmt",
            "name": "fmt",
            "description": "Format files with go fmt.",
            "entry": "fmt.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "vet",
            "name": "vet",
            "description": "Check files with go vet.",
            "entry": "vet.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "fix",
            "name": "fix",
            "description": "Fix files with go fix.",
            "entry": "go fix",
            "language": "system",
            "files": "\\.go$"
        }
    ],
    "https://github.com/doublify/pre-commit-hindent": [
        {
            "id": "hindent",
            "name": "hindent",
            "description": "Format files with hindent.",
            "entry": "hindent.sh",
            "language": "script",
            "files": "\\.(hs|lhs)$"
        }
    ],
    "https://github.com/doublify/pre-commit-rust": [
        {
            "id": "fmt",
            "name": "fmt",
            "description": "Format files with cargo fmt.",
            "entry": "cargo fmt",
            "language": "system",
            "types": [
                "rust"
            ],
            "args": [
                "--"
            ]
        },
        {
            "id": "cargo-check",
            "name": "cargo check",
            "description": "Check the package for errors.",
            "entry": "cargo check",
            "language": "system",
            "types": [
                "rust"
            ],
            "pass_filenames": false
        },
        {
            "id": "clippy",
            "name": "clippy",
            "description": "Lint rust sources",
            "entry": "cargo clippy",
            "language": "system",
            "args": [
                "--",
                "-D",
                "warnings"
            ],
            "types": [
                "rust"
            ],
            "pass_filenames": false
        }
    ],
    "https://github.com/awebdeveloper/pre-commit-stylelint": [
        {
            "id": "stylelint",
            "name": "stylelint",
            "entry": "stylelint",
            "language": "node",
            "files": "\\.(css|scss|sass)$",
            "args": [],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/awebdeveloper/pre-commit-tslint": [
        {
            "id": "tslint",
            "name": "tslint",
            "entry": "tslint",
            "language": "node",
            "files": "\\.(ts|tsx)$",
            "args": [],
            "minimum_pre_commit_version": "0.12.0"
        }
    ],
    "https://github.com/adrienverge/yamllint": [
        {
            "id": "yamllint",
            "name": "yamllint",
            "description": "This hook runs yamllint.",
            "entry": "yamllint",
            "language": "python",
            "types": [
                "file",
                "yaml"
            ]
        }
    ],
    "https://github.com/thlorenz/doctoc": [
        {
            "id": "doctoc",
            "name": "doctoc",
            "language": "node",
            "entry": "doctoc",
            "types": [
                "markdown"
            ]
        }
    ],
    "https://github.com/noahsark769/xcodeproj-sort-pre-commit-hook": [
        {
            "id": "xcodeproj-sort",
            "name": "Sort the xcode project file",
            "description": "This hook sorts your .xcodeproj file",
            "entry": "xcodeproj-sort",
            "language": "ruby",
            "files": ".*\\.pbxproj"
        }
    ],
    "https://github.com/jorisroovers/gitlint": [
        {
            "id": "gitlint",
            "name": "gitlint",
            "description": "Checks your git commit messages for style.",
            "language": "python",
            "additional_dependencies": [
                "./gitlint-core[trusted-deps]"
            ],
            "entry": "gitlint",
            "args": [
                "--staged",
                "--msg-filename"
            ],
            "stages": [
                "commit-msg"
            ]
        },
        {
            "id": "gitlint-ci",
            "name": "gitlint",
            "language": "python",
            "additional_dependencies": [
                "./gitlint-core[trusted-deps]"
            ],
            "entry": "gitlint",
            "always_run": true,
            "pass_filenames": false,
            "stages": [
                "manual"
            ]
        }
    ],
    "https://github.com/psf/black": [
        {
            "id": "black",
            "name": "black",
            "description": "Black: The uncompromising Python code formatter",
            "entry": "black",
            "language": "python",
            "minimum_pre_commit_version": "2.9.2",
            "require_serial": true,
            "types_or": [
                "python",
                "pyi"
            ]
        },
        {
            "id": "black-jupyter",
            "name": "black-jupyter",
            "description": "Black: The uncompromising Python code formatter (with Jupyter Notebook support)",
            "entry": "black",
            "language": "python",
            "minimum_pre_commit_version": "2.9.2",
            "require_serial": true,
            "types_or": [
                "python",
                "pyi",
                "jupyter"
            ],
            "additional_dependencies": [
                ".[jupyter]"
            ]
        }
    ],
    "https://github.com/IamTheFij/ansible-pre-commit": [
        {
            "id": "encryption-check",
            "name": "Ansible Vault Encryption Check",
            "description": "Checks that vault files are encrypted",
            "entry": "encryption-check.sh",
            "files": "((?:^|\\/)vault|vault\\.ya?ml$|\\.vault$)",
            "language": "script"
        }
    ],
    "https://github.com/IamTheFij/docker-pre-commit": [
        {
            "id": "docker-compose-check",
            "name": "Validate docker compose files",
            "description": "Checks that docker compose files are valid",
            "language": "script",
            "entry": "compose-check.sh",
            "files": "(docker-)?compose\\.ya?ml$"
        }
    ],
    "https://github.com/mattlqx/pre-commit-ruby": [
        {
            "id": "rubocop",
            "name": "Check Ruby style with rubocop",
            "description": "Enforce Ruby style guide with rubocop",
            "entry": "bin/rubocop-wrapper.sh",
            "language": "script",
            "pass_filenames": true,
            "types": [
                "ruby"
            ]
        },
        {
            "id": "rspec",
            "name": "Unit test Ruby code with rspec",
            "description": "Run rspec in changed paths with spec directories",
            "entry": "bin/rspec-wrapper.rb",
            "language": "script",
            "pass_filenames": true,
            "types": [
                "ruby"
            ]
        },
        {
            "id": "foodcritic",
            "name": "Enforce Chef style guide with foodcritic",
            "description": "Enforce Chef style guide with foodcritic",
            "entry": "bin/foodcritic-wrapper.rb",
            "language": "script",
            "pass_filenames": true,
            "types": [
                "file"
            ],
            "files": "(?x)^(\n    .*/(recipes|attributes|resources|providers)/.*\\.rb|\n    .*/metadata\\.rb\n)$\n",
            "exclude": ".*/test/.*\\.rb$"
        },
        {
            "id": "cookstyle",
            "name": "Enforce Chef style guide with cookstyle",
            "description": "Enforce Chef style guide with cookstyle",
            "entry": "bin/cookstyle-wrapper.rb",
            "language": "script",
            "pass_filenames": true,
            "types": [
                "ruby"
            ],
            "require_serial": true
        },
        {
            "id": "chef-cookbook-version",
            "name": "Ensure Chef cookbook version bump",
            "description": "Ensure Chef cookbook versions are bumped when contents are changed",
            "entry": "bin/cookbook-wrapper.rb",
            "language": "script",
            "pass_filenames": true,
            "types": [
                "file"
            ]
        }
    ],
    "https://github.com/mattlqx/pre-commit-sign": [
        {
            "id": "sign-commit",
            "name": "Sign commit",
            "description": "Hashes some fields of the commit and adds a signature for verification by other systems",
            "entry": "sign-commit",
            "language": "ruby",
            "language_version": "3.2.2",
            "pass_filenames": true,
            "minimum_pre_commit_version": "3.0.0",
            "stages": [
                "commit-msg"
            ]
        }
    ],
    "https://github.com/mattlqx/pre-commit-search-and-replace": [
        {
            "id": "search-and-replace",
            "name": "Search and replace strings",
            "description": "Search and replace strings",
            "entry": "search-and-replace",
            "language": "ruby",
            "pass_filenames": true,
            "exclude_types": [
                "binary"
            ]
        }
    ],
    "https://github.com/pryorda/dockerfilelint-precommit-hooks": [
        {
            "id": "dockerfilelint",
            "name": "Dockerfile linter",
            "entry": "dockerfilelint",
            "language": "node",
            "additional_dependencies": [
                "dockerfilelint"
            ],
            "files": "Dockerfile.*"
        }
    ],
    "https://github.com/alessandrojcm/commitlint-pre-commit-hook": [
        {
            "id": "commitlint",
            "name": "commitlint",
            "description": "Commitlint hook",
            "language": "node",
            "entry": "commitlint --edit",
            "pass_filenames": false,
            "always_run": true
        },
        {
            "id": "commitlint-travis",
            "name": "Check commit messages on Travis CI",
            "description": "Lint all relevant commits for a change or PR on Travis CI",
            "language": "node",
            "entry": "commitlint-travis",
            "always_run": true,
            "pass_filenames": false
        }
    ],
    "https://github.com/henryykt/pre-commit-perl": [
        {
            "id": "perlcritic",
            "name": "perlcritic",
            "entry": "run-perlcritic.sh",
            "types_or": [
                "perl",
                "file"
            ],
            "files": "\\.(pl|pm|t|PL)$",
            "language": "script",
            "description": "Runs `perlcritic`, requires script in PATH"
        },
        {
            "id": "perltidy",
            "name": "perltidy",
            "entry": "run-perltidy.sh",
            "types_or": [
                "perl",
                "file"
            ],
            "files": "\\.(pl|pm|t|PL)$",
            "language": "script",
            "description": "Runs `perltidy`, requires script in PATH"
        },
        {
            "id": "perlimports",
            "name": "perlimports",
            "entry": "run-perlimports.sh --inplace-edit",
            "types_or": [
                "perl",
                "file"
            ],
            "files": "\\.(pl|pm|t|PL)$",
            "language": "script",
            "description": "Runs `perlimports --inplace-edit`, requires script in PATH"
        },
        {
            "id": "perlimports-lint",
            "name": "perlimports-lint",
            "entry": "run-perlimports.sh --lint",
            "types_or": [
                "perl",
                "file"
            ],
            "files": "\\.(pl|pm|t|PL)$",
            "language": "script",
            "description": "Runs `perlimports --lint`, requires script in PATH"
        }
    ],
    "https://github.com/juancarlospaco/pre-commit-nim": [
        {
            "id": "nimble-check",
            "name": "nimble check",
            "entry": "nimble check .",
            "pass_filenames": false,
            "language": "system",
            "files": "\\.nim$"
        },
        {
            "id": "nim-check",
            "name": "nim check",
            "entry": "bash -xc 'echo \"$@\" | xargs --verbose -n1 nim check' --",
            "language": "system",
            "files": "\\.nim$"
        }
    ],
    "https://github.com/aws-cloudformation/cfn-lint": [
        {
            "id": "cfn-python-lint",
            "name": "AWS CloudFormation Linter",
            "description": "cfn-lint is a tool for finding issues with CloudFormation templates",
            "entry": "cfn-lint",
            "language": "python",
            "files": "\\.(json|yaml|yml)$"
        },
        {
            "id": "cfn-lint",
            "name": "AWS CloudFormation Linter",
            "description": "cfn-lint is a tool for finding issues with CloudFormation templates",
            "entry": "cfn-lint",
            "language": "python",
            "files": "\\.(json|yaml|yml)$"
        },
        {
            "id": "cfn-lint-rc",
            "name": "AWS CloudFormation Linter",
            "description": "cfn-lint is a tool for finding issues with CloudFormation templates",
            "entry": "cfn-lint",
            "language": "python",
            "pass_filenames": false
        }
    ],
    "https://github.com/thoughtworks/talisman": [
        {
            "id": "talisman-commit",
            "name": "talisman",
            "entry": "talisman --githook pre-commit",
            "stages": [
                "commit"
            ],
            "pass_filenames": false,
            "types": [
                "text"
            ],
            "language": "golang"
        },
        {
            "id": "talisman-push",
            "name": "talisman",
            "entry": "talisman --githook pre-push",
            "stages": [
                "push"
            ],
            "pass_filenames": false,
            "types": [
                "text"
            ],
            "language": "golang"
        }
    ],
    "https://github.com/PyCQA/flake8": [
        {
            "id": "flake8",
            "name": "flake8",
            "description": "`flake8` is a command-line utility for enforcing style consistency across Python projects.",
            "entry": "flake8",
            "language": "python",
            "types": [
                "python"
            ],
            "require_serial": true
        }
    ],
    "https://github.com/PyCQA/bandit": [
        {
            "id": "bandit",
            "name": "bandit",
            "description": "Bandit is a tool for finding common security issues in Python code",
            "entry": "bandit",
            "language": "python",
            "language_version": "python3",
            "types": [
                "python"
            ],
            "require_serial": true
        }
    ],
    "https://github.com/PyCQA/pydocstyle": [
        {
            "id": "pydocstyle",
            "name": "pydocstyle",
            "description": "pydocstyle is a static analysis tool for checking compliance with Python docstring conventions.",
            "entry": "pydocstyle",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/PyCQA/pylint": [
        {
            "id": "pylint",
            "name": "pylint",
            "entry": "pylint",
            "language": "python",
            "types": [
                "python"
            ],
            "require_serial": true
        }
    ],
    "https://github.com/PyCQA/doc8": [
        {
            "id": "doc8",
            "name": "doc8",
            "description": "This hook runs doc8 for linting docs",
            "entry": "python -m doc8",
            "language": "python",
            "files": "\\.rst$",
            "require_serial": true
        }
    ],
    "https://github.com/PyCQA/prospector": [
        {
            "id": "prospector",
            "name": "prospector",
            "description": "Analyze Python code using Prospector",
            "entry": "prospector",
            "language": "python",
            "types": [
                "python"
            ],
            "require_serial": true
        }
    ],
    "https://github.com/PyCQA/isort": [
        {
            "id": "isort",
            "name": "isort",
            "entry": "isort",
            "stages": [
                "commit",
                "merge-commit",
                "push",
                "manual"
            ],
            "require_serial": true,
            "language": "python",
            "types_or": [
                "cython",
                "pyi",
                "python"
            ],
            "args": [
                "--filter-files"
            ],
            "minimum_pre_commit_version": "2.9.2"
        }
    ],
    "https://github.com/PyCQA/docformatter": [
        {
            "id": "docformatter",
            "name": "docformatter",
            "description": "Formats docstrings to follow PEP 257.",
            "entry": "docformatter",
            "args": [
                "-i"
            ],
            "language": "python",
            "types": [
                "python"
            ]
        },
        {
            "id": "docformatter-venv",
            "name": "docformatter-venv",
            "description": "Formats docstrings to follow PEP 257. Uses python3 -m venv.",
            "entry": "docformatter",
            "args": [
                "-i"
            ],
            "language": "python_venv",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/PyCQA/autoflake": [
        {
            "id": "autoflake",
            "name": "autoflake",
            "entry": "autoflake",
            "language": "python",
            "types": [
                "python"
            ],
            "require_serial": true,
            "args": [
                "--in-place",
                "--expand-star-imports",
                "--remove-duplicate-keys",
                "--remove-unused-variables"
            ]
        }
    ],
    "https://github.com/miki725/importanize": [
        {
            "id": "importanize",
            "name": "importanize",
            "description": "Organize python imports",
            "entry": "importanize",
            "language": "python",
            "language_version": "python3",
            "types": [
                "python"
            ],
            "args": [
                "-v",
                "--no-auto-pipe"
            ]
        }
    ],
    "https://github.com/motet-a/jinjalint": [
        {
            "id": "jinjalint",
            "name": "jinjalint",
            "description": "A linter which checks the indentation and the correctness of Jinja-like/HTML templates.",
            "language": "python",
            "language_version": "python3",
            "entry": "jinjalint",
            "types": [
                "jinja"
            ]
        }
    ],
    "https://github.com/milin/giticket": [
        {
            "id": "giticket",
            "name": "giticket",
            "entry": "giticket",
            "language": "python",
            "stages": [
                "commit-msg"
            ],
            "description": "Utility to prepend your commits with info from your branch."
        }
    ],
    "https://github.com/milin/gitown": [
        {
            "id": "gitown",
            "name": "gitown",
            "entry": "gitown",
            "language": "python",
            "stages": [
                "commit"
            ],
            "description": "Keep your CODEOWNERS file up to date to streamline code review process."
        }
    ],
    "https://github.com/sqlalchemyorg/zimports": [
        {
            "id": "zimports",
            "name": "zimports",
            "description": "Python import rewriter",
            "entry": "zimports",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/peterdemin/pip-compile-multi": [
        {
            "id": "pip-compile-multi-verify",
            "name": "pip-compile-multi verify",
            "language": "python",
            "entry": "pip-compile-multi verify",
            "files": "^requirements/",
            "pass_filenames": false,
            "require_serial": true,
            "types": [
                "file",
                "non-executable",
                "text"
            ]
        }
    ],
    "https://github.com/homebysix/pre-commit-macadmin": [
        {
            "id": "check-autopkg-recipe-list",
            "name": "Check AutoPkg Recipe List",
            "description": "This hook checks AutoPkg recipe lists (in txt, plist, yaml, or json format) for common issues.",
            "entry": "check-autopkg-recipe-list",
            "language": "python",
            "files": "recipe.?list\\.(plist|yaml|yml|json|txt)$",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-autopkg-recipes",
            "name": "Check AutoPkg Recipes",
            "description": "This hook checks AutoPkg recipes to ensure they contain required top-level keys.",
            "entry": "check-autopkg-recipes",
            "language": "python",
            "files": "\\.recipe(\\.plist|\\.yaml|\\.json)?$",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-git-config-email",
            "name": "Check Git Config Email",
            "description": "This hook checks to ensure the Git config email matches one of the specified domains.",
            "entry": "check-git-config-email",
            "language": "python",
            "pass_filenames": false,
            "always_run": true
        },
        {
            "id": "check-jamf-extension-attributes",
            "name": "Check Jamf EAs",
            "description": "This hook checks Jamf extension attributes for common issues.",
            "entry": "check-jamf-extension-attributes",
            "language": "python",
            "files": "(jamf|jss)/extension.?attributes/.*\\.(sh|bash|py|rb|js|pl)$",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-jamf-profiles",
            "name": "Check Jamf Profiles",
            "description": "This hook checks Jamf profiles for common issues.",
            "entry": "check-jamf-profiles",
            "language": "python",
            "files": "(jamf|jss)/profiles/.*\\.(mobileconfig|plist)$",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-jamf-scripts",
            "name": "Check Jamf Scripts",
            "description": "This hook checks Jamf scripts for common issues.",
            "entry": "check-jamf-scripts",
            "language": "python",
            "files": "(jamf|jss)/scripts/.*\\.(sh|bash|py|rb|js|pl)$",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-munki-pkgsinfo",
            "name": "Check Munki Pkginfo Files",
            "description": "This hook checks Munki pkginfo files to ensure they are valid.",
            "entry": "check-munki-pkgsinfo",
            "language": "python",
            "files": "pkgsinfo/",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-munkiadmin-scripts",
            "name": "Check MunkiAdmin Scripts",
            "description": "This hook ensures MunkiAdmin scripts are executable.",
            "entry": "check-munkiadmin-scripts",
            "language": "python",
            "files": "^MunkiAdmin/scripts/",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-munkipkg-buildinfo",
            "name": "Check MunkiPkg Build-Info Files",
            "description": "This hook checks MunkiPkg build-info files to ensure they are valid.",
            "entry": "check-munkipkg-buildinfo",
            "language": "python",
            "files": "build-info\\.(plist|yml|yaml|json)$",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-outset-scripts",
            "name": "Check Outset Scripts",
            "description": "This hook checks Outset scripts to ensure they're executable.",
            "entry": "check-outset-scripts",
            "language": "python",
            "files": "usr/local/outset/(boot-once|boot-every|login-once|login-every|login-privileged-once|login-privileged-every|on-demand)/",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-plists",
            "name": "Check Plists",
            "description": "This hook checks XML property list (plist) files for basic syntax errors.",
            "entry": "check-plists",
            "language": "python",
            "files": "\\.(plist|recipe|mobileconfig|pkginfo)$",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-preference-manifests",
            "name": "Check Apple Preference Manifests",
            "description": "This hook checks preference manifest plists for inconsistencies and common issues.",
            "entry": "check-preference-manifests",
            "language": "python",
            "files": "\\.plist$",
            "types": [
                "text"
            ]
        },
        {
            "id": "forbid-autopkg-overrides",
            "name": "Forbid AutoPkg Overrides",
            "description": "This hook prevents AutoPkg overrides from being added to the repo.",
            "entry": "forbid-autopkg-overrides",
            "language": "python",
            "files": "\\.recipe(\\.plist|\\.yaml|\\.json)?$",
            "types": [
                "text"
            ]
        },
        {
            "id": "forbid-autopkg-trust-info",
            "name": "Forbid AutoPkg Trust Info",
            "description": "This hook prevents AutoPkg recipes with trust info from being added to the repo.",
            "entry": "forbid-autopkg-trust-info",
            "language": "python",
            "files": "\\.recipe(\\.plist|\\.yaml|\\.json)?$",
            "types": [
                "text"
            ]
        },
        {
            "id": "munki-makecatalogs",
            "name": "Run Munki Makecatalogs",
            "description": "This hook runs the \"makecatalogs\" command to ensure all referenced packages are present and catalogs are up to date.",
            "entry": "munki-makecatalogs",
            "language": "python",
            "pass_filenames": false,
            "always_run": true
        }
    ],
    "https://github.com/fortman/pre-commit-prometheus": [
        {
            "id": "check-config",
            "stages": [
                "commit"
            ],
            "name": "Check prometheus config files",
            "description": "Check prometheus config files",
            "language": "docker_image",
            "entry": "--entrypoint /bin/promtool prom/prometheus:latest",
            "files": "^$",
            "args": [
                "check",
                "config"
            ]
        },
        {
            "id": "check-rules",
            "stages": [
                "commit"
            ],
            "name": "Check prometheus rule files",
            "description": "Check prometheus rule files",
            "language": "docker_image",
            "entry": "--entrypoint /bin/promtool prom/prometheus:latest",
            "files": "^$",
            "args": [
                "check",
                "rules"
            ]
        },
        {
            "id": "test-rules",
            "stages": [
                "commit"
            ],
            "name": "Unit test prometheus rule files",
            "description": "Unit test prometheus rule files",
            "language": "docker_image",
            "entry": "--entrypoint /bin/promtool prom/prometheus:latest",
            "files": "^$",
            "args": [
                "test",
                "rules"
            ]
        }
    ],
    "https://github.com/syntaqx/git-hooks": [
        {
            "id": "circleci-config-validate",
            "name": "CircleCI config validation",
            "description": "Test if the CircleCI config is well formed.",
            "entry": "hooks/circleci-config-validate.sh",
            "language": "script",
            "files": "^.circleci/*.yml$"
        },
        {
            "id": "go-fmt",
            "name": "go fmt",
            "description": "Runs `go fmt` and asserts no changes are needed.",
            "entry": "hooks/go-fmt.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "go-test",
            "name": "go test",
            "description": "Runs `go test` and asserts no tests are failing.",
            "entry": "hooks/go-test.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "go-mod-tidy",
            "name": "go mod tidy",
            "description": "Runs `go mod tidy` to ensure `go.mod` matches the project source.",
            "entry": "hooks/go-mod-tidy.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "go-generate",
            "name": "go generate",
            "description": "Runs `go generate` against the projects go files.",
            "entry": "hooks/go-generate.sh",
            "language": "script",
            "files": "\\.go$",
            "always_run": true
        },
        {
            "id": "forbid-binary",
            "name": "Forbid binaries",
            "description": "Forbid binary files from being committed",
            "entry": "hooks/forbid-binary.sh",
            "language": "script",
            "types": [
                "binary"
            ]
        },
        {
            "id": "shellcheck",
            "name": "Test shell scripts with shellcheck",
            "description": "Shell scripts conform to shellcheck",
            "entry": "hooks/shellcheck.sh",
            "language": "script",
            "types": [
                "shell"
            ],
            "exclude_types": [
                "csh",
                "perl",
                "python",
                "ruby",
                "tcsh",
                "zsh"
            ],
            "args": [
                "-e",
                "SC1091"
            ]
        },
        {
            "id": "shfmt",
            "name": "Check shell style with shfmt",
            "language": "script",
            "entry": "hooks/shfmt.sh",
            "types": [
                "shell"
            ],
            "exclude_types": [
                "csh",
                "perl",
                "python",
                "ruby",
                "tcsh",
                "zsh"
            ],
            "args": [
                "-l",
                "-i",
                "2",
                "-ci"
            ]
        }
    ],
    "https://github.com/lunarmodules/luacheck": [
        {
            "id": "luacheck",
            "name": "Luacheck",
            "description": "Lint and static analysis of Lua code",
            "entry": "luacheck",
            "language": "lua",
            "types": [
                "lua"
            ]
        }
    ],
    "https://github.com/Koihik/LuaFormatter": [
        {
            "id": "luaformatter",
            "name": "LuaFormatter",
            "description": "Format Lua code to a set style",
            "entry": "lua-format -i",
            "language": "lua",
            "types": [
                "lua"
            ]
        }
    ],
    "https://github.com/Calinou/pre-commit-luacheck": [
        {
            "id": "luacheck",
            "name": "Luacheck",
            "description": "Lints Lua files using Luacheck.",
            "entry": "luacheck --",
            "language": "system",
            "types": [
                "file",
                "lua"
            ]
        }
    ],
    "https://github.com/belminf/pre-commit-chef": [
        {
            "id": "cookstyle",
            "name": "Chef-specific Rubocop linting with Cookstyle",
            "entry": "run_cookstyle.rb",
            "language": "ruby",
            "pass_filenames": true,
            "types": [
                "ruby"
            ],
            "files": ".*",
            "args": [
                "-a",
                "-D",
                "-S"
            ],
            "require_serial": true
        },
        {
            "id": "foodcritic",
            "name": "Chef cookbook linting with Foodcritic",
            "entry": "run_foodcritic.rb",
            "language": "ruby",
            "pass_filenames": true,
            "types": [
                "ruby"
            ],
            "files": "(?x)^(\n    (.*/)?(recipes|attributes|resources|providers)/.*\\.rb|\n    (.*/)?metadata\\.rb\n)$\n",
            "exclude": ".*/test/.*\\.rb$",
            "require_serial": true
        }
    ],
    "https://github.com/pocc/pre-commit-hooks": [
        {
            "id": "clang-format",
            "name": "clang-format",
            "entry": "clang-format-hook",
            "description": "Formats C, C++, Objective-C, and Java code",
            "types_or": [
                "c",
                "c++",
                "c#",
                "objective-c",
                "java"
            ],
            "language": "python"
        },
        {
            "id": "clang-tidy",
            "name": "clang-tidy",
            "entry": "clang-tidy-hook",
            "description": "Find warnings/errors in C, C++, and Objective-C code",
            "types_or": [
                "c",
                "c++",
                "c#",
                "objective-c"
            ],
            "language": "python"
        },
        {
            "id": "oclint",
            "name": "oclint",
            "entry": "oclint-hook",
            "description": "Find warnings/errors in C, C++, and Objective-C code",
            "types_or": [
                "c",
                "c++",
                "c#",
                "objective-c"
            ],
            "language": "python"
        },
        {
            "id": "uncrustify",
            "name": "uncrustify",
            "entry": "uncrustify-hook",
            "description": "Formats C, C++, Objective-C, Java, D, and Vala code",
            "types_or": [
                "c",
                "c++",
                "c#",
                "objective-c",
                "java"
            ],
            "language": "python"
        },
        {
            "id": "cppcheck",
            "name": "cppcheck",
            "entry": "cppcheck-hook",
            "description": "Find warnings/errors in C, C++, and Objective-C code",
            "types_or": [
                "c",
                "c++",
                "c#",
                "objective-c"
            ],
            "language": "python"
        },
        {
            "id": "cpplint",
            "name": "cpplint",
            "entry": "cpplint-hook",
            "description": "Find warnings/errors in C/CPP code",
            "types_or": [
                "c",
                "c++",
                "c#",
                "objective-c",
                "cuda"
            ],
            "language": "python"
        },
        {
            "id": "include-what-you-use",
            "name": "include-what-you-use",
            "entry": "include-what-you-use-hook",
            "description": "Runs Include-What-You-Use (iwyu) in C/CPP code",
            "types_or": [
                "c",
                "c++",
                "c#",
                "objective-c",
                "cuda"
            ],
            "language": "python"
        }
    ],
    "https://github.com/dwightgunning/pre-commit-nglint": [
        {
            "id": "nglint",
            "name": "nglint",
            "description": "Runs ng lint",
            "entry": "nglint.py",
            "language": "script",
            "minimum_pre_commit_version": "0.12.0"
        }
    ],
    "https://github.com/codespell-project/codespell": [
        {
            "id": "codespell",
            "name": "codespell",
            "description": "Checks for common misspellings in text files.",
            "entry": "codespell",
            "language": "python",
            "types": [
                "text"
            ]
        }
    ],
    "https://gitlab.com/smop/pre-commit-hooks": [
        {
            "id": "check-poetry",
            "name": "Poetry check",
            "description": "Validates the structure of the pyproject.toml file",
            "entry": "poetry check",
            "language": "system",
            "pass_filenames": false,
            "files": "pyproject.toml"
        },
        {
            "id": "check-gitlab-ci",
            "name": "GitLab CI/CD configuration check",
            "description": "Validates .gitlab-ci.yml file",
            "entry": "pre_commit_hooks/check-gitlab-ci",
            "language": "script",
            "pass_filenames": false,
            "files": ".gitlab-ci.yml"
        }
    ],
    "https://github.com/seddonym/import-linter": [
        {
            "id": "import-linter",
            "name": "import-linter",
            "description": "Import Linter allows you to define and enforce rules for the internal and external imports within your Python project.",
            "entry": "lint-imports",
            "language": "python",
            "types": [
                "python"
            ],
            "pass_filenames": false
        }
    ],
    "https://github.com/marco-c/taskcluster_yml_validator": [
        {
            "id": "taskcluster_yml",
            "name": "taskcluster_yml",
            "description": "Checks for validity of .taskcluster.yml file.",
            "entry": "taskcluster_yml_validator",
            "language": "python",
            "files": "^\\.taskcluster\\.yml$",
            "args": [],
            "require_serial": false,
            "additional_dependencies": []
        }
    ],
    "https://github.com/rstcheck/rstcheck": [
        {
            "id": "rstcheck",
            "name": "rstcheck",
            "entry": "rstcheck",
            "language": "python",
            "types": [
                "rst"
            ],
            "require_serial": true
        }
    ],
    "https://github.com/lorenzwalthert/precommit": [
        {
            "id": "roxygenize",
            "name": "roxygenize",
            "description": "run `roxygen2::roxygenize()`",
            "entry": "Rscript inst/hooks/exported/roxygenize.R",
            "language": "r",
            "files": "^(R|man)/",
            "require_serial": true,
            "minimum_pre_commit_version": "2.13.0"
        },
        {
            "id": "use-tidy-description",
            "name": "use-tidy-description",
            "description": "run `usethis::use_tidy_description()`",
            "entry": "Rscript inst/hooks/exported/use-tidy-description.R",
            "language": "r",
            "files": "^DESCRIPTION$",
            "minimum_pre_commit_version": "2.13.0"
        },
        {
            "id": "style-files",
            "name": "style-files",
            "description": "style files with {styler}",
            "entry": "Rscript inst/hooks/exported/style-files.R",
            "language": "r",
            "files": "(\\.[rR]profile|\\.[rR]|\\.[rR]md|\\.[rR]nw|\\.[qQ]md)$",
            "exclude": "renv/activate\\.R",
            "minimum_pre_commit_version": "2.13.0"
        },
        {
            "id": "no-browser-statement",
            "name": "no-browser-statement",
            "description": "check if a .R file contains a `browser()` statement",
            "entry": "Rscript inst/hooks/exported/no-browser-statement.R",
            "language": "r",
            "files": "\\.[rR]$",
            "minimum_pre_commit_version": "2.13.0"
        },
        {
            "id": "no-print-statement",
            "name": "no-print-statement",
            "description": "check if a .R file contains a `print()` statement",
            "entry": "Rscript inst/hooks/exported/no-print-statement.R",
            "language": "r",
            "files": "\\.[rR]$",
            "minimum_pre_commit_version": "2.13.0"
        },
        {
            "id": "no-debug-statement",
            "name": "no-debug-statement",
            "description": "check if a .R file contains a `debug()` or `debugonce()` statement",
            "entry": "Rscript inst/hooks/exported/no-debug-statement.R",
            "language": "r",
            "files": "\\.[rR]$",
            "minimum_pre_commit_version": "2.13.0"
        },
        {
            "id": "parsable-R",
            "name": "parsable-R",
            "description": "check if a .R file is parsable",
            "entry": "Rscript inst/hooks/exported/parsable-R.R",
            "language": "r",
            "files": "\\.[rR](md)?$",
            "minimum_pre_commit_version": "2.13.0"
        },
        {
            "id": "readme-rmd-rendered",
            "name": "readme-rmd-rendered",
            "description": "make sure README.Rmd hasn't been edited more recently than `README.md`",
            "entry": "Rscript inst/hooks/exported/readme-rmd-rendered.R",
            "language": "r",
            "files": "README\\.[Rr]?md$",
            "minimum_pre_commit_version": "2.13.0"
        },
        {
            "id": "codemeta-description-updated",
            "name": "codemeta-description-updated",
            "description": "make sure `codemeta.json` is in sync with `DESCRIPTION`. It should be run after use-tidy-description",
            "entry": "Rscript inst/hooks/exported/codemeta-description-updated.R",
            "language": "r",
            "files": "^DESCRIPTION$",
            "minimum_pre_commit_version": "2.13.0"
        },
        {
            "id": "spell-check",
            "name": "spell-check",
            "description": "perform a spell check with `spelling::spell_check_files()`",
            "entry": "Rscript inst/hooks/exported/spell-check.R",
            "language": "r",
            "exclude": "(?x)^( .*\\.[rR]| .*\\.feather| .*\\.jpeg| .*\\.pdf| .*\\.png| .*\\.py| .*\\.RData| .*\\.rds| .*\\.Rds| .*\\.Rproj| .*\\.sh| (.*/|)\\.gitignore| (.*/|)\\.pre-commit-.*| (.*/|)\\.Rbuildignore| (.*/|)\\.Renviron| (.*/|)\\.Rprofile| (.*/|)\\.travis\\.yml| (.*/|)appveyor\\.yml| (.*/|)NAMESPACE| (.*/|)renv/settings\\.dcf| (.*/|)renv\\.lock| (.*/|)WORDLIST| \\.github/workflows/.*| data/.*| )$\n",
            "require_serial": true,
            "minimum_pre_commit_version": "2.13.0"
        },
        {
            "id": "deps-in-desc",
            "name": "deps-in-desc",
            "description": "Check if dependencies that can be parsed from code are in `DESCRIPTION`",
            "entry": "Rscript inst/hooks/exported/deps-in-desc.R",
            "language": "r",
            "files": "(\\.[rR]profile|\\.R|\\.Rmd|\\.Rnw|\\.r|\\.rmd|\\.rnw)$",
            "exclude": "renv/activate\\.R",
            "minimum_pre_commit_version": "2.13.0"
        },
        {
            "id": "lintr",
            "name": "lintr",
            "description": "check if a `.R` file is lint free (using {lintr})",
            "entry": "Rscript inst/hooks/exported/lintr.R",
            "language": "r",
            "files": "(\\.[rR]profile|\\.R|\\.Rmd|\\.Rnw|\\.r|\\.rmd|\\.rnw)$",
            "exclude": "renv/activate\\.R",
            "minimum_pre_commit_version": "2.13.0"
        },
        {
            "id": "pkgdown",
            "name": "pkgdown",
            "description": "check if your {pkgdown} config file has the correct entries for references and articles",
            "entry": "inst/hooks/exported/pkgdown.R",
            "language": "script",
            "minimum_pre_commit_version": "2.13.0",
            "files": "^man/|_pkgdown\\.yml"
        }
    ],
    "https://github.com/lorenzwalthert/gitignore-tidy": [
        {
            "id": "tidy-gitignore",
            "name": "Sort entries in gitignore",
            "description": "Ensure gitignore entries are unique, sorted and have no unecessary white spaces",
            "entry": "gitignore-tidy",
            "language": "python",
            "files": "\\.gitignore$"
        }
    ],
    "https://github.com/FelixSeptem/pre-commit-golang": [
        {
            "id": "bazel-buildifier",
            "name": "bazel buildifier",
            "entry": "run-bazel-buildifier.sh",
            "files": "BUILD.bazel|BUILD",
            "language": "script",
            "description": "Runs `buildifier`, requires bazel buildifier"
        },
        {
            "id": "go-imports",
            "name": "go imports",
            "entry": "run-go-imports.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go imports`, requires golang"
        },
        {
            "id": "go-critic",
            "name": "go-critic",
            "entry": "run-go-critic.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go-critic`, requires go-critic"
        },
        {
            "id": "golangci-lint",
            "name": "golangci-lint",
            "entry": "run-golangci-lint.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `golangci-lint`, requires golangci-lint"
        },
        {
            "id": "golangci-lint-conf",
            "name": "golangci-lint-conf",
            "entry": "run-golangci-lint-conf.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `golangci-lint` read local config file, requires golangci-lint"
        },
        {
            "id": "go-mod-tidy",
            "name": "go mod tidy",
            "entry": "run-go-mod-tidy.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go mod tidy` make sure latest and avaliable go mod file"
        }
    ],
    "https://gitlab.com/daverona/pre-commit/cpp": [
        {
            "id": "clang-format",
            "name": "clang-format",
            "description": "Run `clang-format` against C/C++ header and source files",
            "language": "system",
            "files": "\\.(h\\+\\+|h|hh|hxx|hpp|cuh|c|cc|cpp|cu|c\\+\\+|cxx|tpp|txx)$",
            "entry": "clang-format -i",
            "args": [
                "-style=Google"
            ]
        },
        {
            "id": "cpplint",
            "name": "cpplint",
            "description": "Run `cpplint` against C/C++ header and source files",
            "language": "python",
            "files": "\\.(h\\+\\+|h|hh|hxx|hpp|cuh|c|cc|cpp|cu|c\\+\\+|cxx|tpp|txx)$",
            "entry": "cpplint"
        },
        {
            "id": "cppcheck",
            "name": "cppcheck",
            "description": "Run `cppcheck` against C/C++ source files",
            "language": "system",
            "files": "\\.(c|cc|cpp|cu|c\\+\\+|cxx|tpp|txx)$",
            "entry": "cppcheck --error-exitcode=1"
        },
        {
            "id": "docker-clang-format",
            "name": "clang-format",
            "description": "Run `clang-format` against C/C++ header and source files in Docker container",
            "language": "docker_image",
            "files": "\\.(h\\+\\+|h|hh|hxx|hpp|cuh|c|cc|cpp|cu|c\\+\\+|cxx|tpp|txx)$",
            "entry": "daverona/pre-commit-cpp:0.8.0 clang-format -i",
            "args": [
                "-style=Google"
            ]
        },
        {
            "id": "docker-cpplint",
            "name": "cpplint",
            "description": "Run `cpplint` against C/C++ header and source files in Docker container",
            "language": "python",
            "files": "\\.(h\\+\\+|h|hh|hxx|hpp|cuh|c|cc|cpp|cu|c\\+\\+|cxx|tpp|txx)$",
            "entry": "daverona/pre-commit-cpp:0.8.0 cpplint"
        },
        {
            "id": "docker-cppcheck",
            "name": "cppcheck",
            "description": "Run `cppcheck` against C/C++ source files in Docker container",
            "language": "docker_image",
            "files": "\\.(c|cc|cpp|cu|c\\+\\+|cxx|tpp|txx)$",
            "entry": "daverona/pre-commit-cpp:0.8.0 cppcheck --error-exitcode=1"
        }
    ],
    "https://github.com/codingjoe/relint": [
        {
            "id": "relint",
            "name": "relint",
            "description": "Write your own linting rules using regular expressions.",
            "entry": "relint",
            "args": [
                "--git-diff"
            ],
            "language": "python",
            "types": [
                "file"
            ]
        }
    ],
    "https://github.com/nix-community/nixpkgs-fmt": [
        {
            "id": "nixpkgs-fmt",
            "name": "nixpkgs-fmt",
            "description": "Format nix code with nixpkgs-fmt.",
            "entry": "nixpkgs-fmt",
            "language": "rust",
            "files": "\\.nix$",
            "minimum_pre_commit_version": "1.18.1"
        }
    ],
    "https://github.com/d6e/beancount-check": [
        {
            "id": "beancount-check",
            "name": "beancount-check",
            "entry": "bean-check",
            "language": "python",
            "files": ".*(\\.bean|\\.beancount|\\.ledger)$",
            "require_serial": true,
            "additional_dependencies": [
                "beancount"
            ]
        }
    ],
    "https://gitlab.com/iamlikeme/nbhooks": [
        {
            "id": "nb-ensure-clean",
            "name": "nb-ensure-clean",
            "description": "Ensure that committed Jupyter notebooks contain no outputs.",
            "entry": "nb-ensure-clean",
            "files": "\\.ipynb$",
            "language": "python",
            "language_version": "python3"
        }
    ],
    "https://github.com/Vimjas/vint": [
        {
            "id": "vint",
            "name": "Vint Vim script linting",
            "description": "Lints all vim files",
            "language": "python",
            "entry": "vint",
            "types": [
                "vim"
            ]
        }
    ],
    "https://github.com/eschulte/lisp-format": [
        {
            "id": "lisp-format",
            "name": "formatter of lisp code",
            "description": "Run lisp-format against lisp files",
            "language": "script",
            "files": "\\.(lisp|cl|asd|scm|el)$",
            "entry": "lisp-format -i"
        }
    ],
    "https://github.com/shellcheck-py/shellcheck-py": [
        {
            "id": "shellcheck",
            "name": "shellcheck",
            "description": "Test shell scripts with shellcheck",
            "entry": "shellcheck",
            "language": "python",
            "types": [
                "shell"
            ],
            "require_serial": true
        }
    ],
    "https://github.com/APIDevTools/swagger-cli": [
        {
            "id": "swagger-validation",
            "name": "swagger-validation",
            "entry": "swagger-cli",
            "description": "Hook to validate swagger specs.",
            "language": "node",
            "files": "(openapi|swagger).*\\.(json|ya?ml)$",
            "args": [
                "validate"
            ]
        }
    ],
    "https://github.com/kynan/nbstripout": [
        {
            "id": "nbstripout",
            "name": "nbstripout",
            "description": "nbstripout: strip output from Jupyter and IPython notebooks",
            "entry": "nbstripout",
            "language": "python",
            "types": [
                "jupyter"
            ]
        }
    ],
    "https://gitlab.com/devopshq/gitlab-ci-linter": [
        {
            "id": "gitlab-ci-linter",
            "name": ".gitlab-ci.yml linter",
            "description": "Validates .gitlab-ci.yml file (pure-python version without dependencies)",
            "entry": "gitlab-ci-linter",
            "language": "python",
            "language_version": "python3",
            "pass_filenames": false,
            "files": ".gitlab-ci.yml"
        }
    ],
    "https://github.com/bmorcos/pre-commit-hooks-cpp": [
        {
            "id": "clang-format",
            "name": "clang-format",
            "description": "Format C code using clang-format.",
            "language": "system",
            "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx)$",
            "entry": "clang-format -i",
            "args": [
                "-style=Google"
            ]
        },
        {
            "id": "cpplint",
            "name": "cpplint",
            "description": "Check style of C code using cpplint.",
            "language": "python",
            "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx)$",
            "entry": "cpplint",
            "args": [
                "--verbose=3"
            ]
        },
        {
            "id": "cppcheck",
            "name": "cppcheck",
            "description": "Check correctness of C code using cppcheck.",
            "language": "system",
            "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx)$",
            "entry": "cppcheck --error-exitcode=1",
            "args": [
                "--enable=warning"
            ]
        }
    ],
    "https://github.com/igorshubovych/markdownlint-cli": [
        {
            "id": "markdownlint",
            "name": "markdownlint",
            "description": "Checks the style of Markdown/Commonmark files.",
            "entry": "markdownlint",
            "language": "node",
            "types": [
                "markdown"
            ],
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "markdownlint-fix",
            "name": "markdownlint-fix",
            "description": "Fixes the style of Markdown/Commonmark files.",
            "entry": "markdownlint --fix",
            "language": "node",
            "types": [
                "markdown"
            ],
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "markdownlint-docker",
            "name": "markdownlint-docker",
            "description": "Checks the style of Markdown/Commonmark files.",
            "entry": "ghcr.io/igorshubovych/markdownlint-cli",
            "language": "docker_image",
            "types": [
                "markdown"
            ],
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "markdownlint-fix-docker",
            "name": "markdownlint-fix-docker",
            "description": "Fixes the style of Markdown/Commonmark files.",
            "entry": "ghcr.io/igorshubovych/markdownlint-cli --fix",
            "language": "docker_image",
            "types": [
                "markdown"
            ],
            "minimum_pre_commit_version": "0.15.0"
        }
    ],
    "https://github.com/TekWizely/pre-commit-golang": [
        {
            "id": "my-cmd",
            "name": "my-cmd",
            "entry": "my-cmd.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run '$ARGS[0] [$ARGS[1:]] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "my-cmd-mod",
            "name": "my-cmd-mod",
            "entry": "my-cmd-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root $FILE); $ARGS[0] [$ARGS[1:]] ./...' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "my-cmd-pkg",
            "name": "my-cmd-pkg",
            "entry": "my-cmd-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run '$ARGS[0] [$ARGS[1:]] ./$(dirname $FILE)' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "my-cmd-repo",
            "name": "my-cmd-repo",
            "entry": "my-cmd-repo.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run '$ARGS[0] [$ARGS[1:]]' in the repo root folder",
            "pass_filenames": false
        },
        {
            "id": "my-cmd-repo-mod",
            "name": "my-cmd-repo-mod",
            "entry": "my-cmd-repo-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root); $ARGS[0] [$ARGS[1:]] /...' for each module in the repo",
            "pass_filenames": false
        },
        {
            "id": "my-cmd-repo-pkg",
            "name": "my-cmd-repo-pkg",
            "entry": "my-cmd-repo-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run '$ARGS[0] [$ARGS[1:]] ./...' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "go-build-mod",
            "name": "go-build-mod",
            "entry": "go-build-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root $FILE); go build -o /dev/null [$ARGS] ./...' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-build-pkg",
            "name": "go-build-pkg",
            "entry": "go-build-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'go build -o /dev/null [$ARGS] ./$(dirname $FILE)' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-build-repo-mod",
            "name": "go-build-repo-mod",
            "entry": "go-build-repo-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root); go build -o /dev/null [$ARGS] ./...' for each module in the repo",
            "pass_filenames": false
        },
        {
            "id": "go-build-repo-pkg",
            "name": "go-build-repo-pkg",
            "entry": "go-build-repo-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'go build -o /dev/null [$ARGS] ./...' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "go-critic",
            "name": "go-critic",
            "entry": "go-critic.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'gocritic check [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "go-fmt",
            "name": "go-fmt",
            "entry": "go-fmt.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'gofmt -l -d [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "go-fmt-repo",
            "name": "go-fmt-repo",
            "entry": "go-fmt-repo.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'gofmt -l -d [$ARGS] .' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "go-fumpt",
            "name": "go-fumpt",
            "entry": "go-fumpt.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'fumpt -l -d [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "go-fumpt-repo",
            "name": "go-fumpt-repo",
            "entry": "go-fumpt-repo.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'fumpt -l -d [$ARGS] .' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "go-imports",
            "name": "go-imports",
            "entry": "go-imports.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'goimports -l -d [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "go-imports-repo",
            "name": "go-imports-repo",
            "entry": "go-imports-repo.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'goimports -l -d [$ARGS] .' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "go-lint",
            "name": "go-lint",
            "entry": "go-lint.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'golint -set_exit_status [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "go-mod-tidy",
            "name": "go-mod-tidy",
            "entry": "go-mod-tidy.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root $FILE); go mod tidy [$ARGS]' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-mod-tidy-repo",
            "name": "go-mod-tidy-repo",
            "entry": "go-mod-tidy-repo.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root); go mod tidy [$ARGS]' for each module in the repo",
            "pass_filenames": false
        },
        {
            "id": "go-returns",
            "name": "go-returns",
            "entry": "go-returns.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'goreturns -l -d [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "go-returns-repo",
            "name": "go-returns-repo",
            "entry": "go-returns-repo.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'goreturns -l -d [$ARGS] .' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "go-revive",
            "name": "go-revive",
            "entry": "go-revive.sh",
            "files": "(\\.go$)|(\\brevive\\.toml$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'revive [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "go-revive-mod",
            "name": "go-revive-mod",
            "entry": "go-revive-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)|(\\brevive\\.toml$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root $FILE); revive [$ARGS] ./...' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-revive-repo-mod",
            "name": "go-revive-repo-mod",
            "entry": "go-revive-repo-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)|(\\brevive\\.toml$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root); revive [$ARGS] ./...' for each module in the repo",
            "pass_filenames": false
        },
        {
            "id": "go-sec-mod",
            "name": "go-sec-mod",
            "entry": "go-sec-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root $FILE); gosec [$ARGS] ./...' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-sec-pkg",
            "name": "go-sec-pkg",
            "entry": "go-sec-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'gosec [$ARGS] ./$(dirname $FILE)' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-sec-repo-mod",
            "name": "go-sec-repo-mod",
            "entry": "go-sec-repo-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root); gosec [$ARGS] ./...' for each module in the repo",
            "pass_filenames": false
        },
        {
            "id": "go-sec-repo-pkg",
            "name": "go-sec-repo-pkg",
            "entry": "go-sec-repo-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'gosec [$ARGS] ./...' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "go-staticcheck-mod",
            "name": "go-staticcheck-mod",
            "entry": "go-staticcheck-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root $FILE); staticcheck [$ARGS] ./...' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-staticcheck-pkg",
            "name": "go-staticcheck-pkg",
            "entry": "go-staticcheck-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'staticcheck [$ARGS] ./$(dirname $FILE)' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-staticcheck-repo-mod",
            "name": "go-staticcheck-repo-mod",
            "entry": "go-staticcheck-repo-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root); staticcheck [$ARGS] ./...' for each module in the repo",
            "pass_filenames": false
        },
        {
            "id": "go-staticcheck-repo-pkg",
            "name": "go-staticcheck-repo-pkg",
            "entry": "go-staticcheck-repo-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'staticcheck [$ARGS] ./...' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "go-structslop-mod",
            "name": "go-structslop-mod",
            "entry": "go-structslop-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root $FILE); structslop [$ARGS] ./...' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-structslop-pkg",
            "name": "go-structslop-pkg",
            "entry": "go-structslop-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'structslop [$ARGS] ./$(dirname $FILE)' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-structslop-repo-mod",
            "name": "go-structslop-repo-mod",
            "entry": "go-structslop-repo-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root); structslop [$ARGS] ./...' for each module in the repo",
            "pass_filenames": false
        },
        {
            "id": "go-structslop-repo-pkg",
            "name": "go-structslop-repo-pkg",
            "entry": "go-structslop-repo-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'structslop [$ARGS] ./...' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "go-test-mod",
            "name": "go-test-mod",
            "entry": "go-test-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root $FILE); go test [$ARGS] ./...' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-test-pkg",
            "name": "go-test-pkg",
            "entry": "go-test-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'go test [$ARGS] ./$(dirname $FILE)' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-test-repo-mod",
            "name": "go-test-repo-mod",
            "entry": "go-test-repo-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root); go test [$ARGS] ./...' for each module in the repo",
            "pass_filenames": false
        },
        {
            "id": "go-test-repo-pkg",
            "name": "go-test-repo-pkg",
            "entry": "go-test-repo-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'go test [$ARGS] ./...' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "go-vet-mod",
            "name": "go-vet-mod",
            "entry": "go-vet-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root $FILE); go vet [$ARGS] ./...' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-vet-pkg",
            "name": "go-vet-pkg",
            "entry": "go-vet-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'go vet [$ARGS] ./$(dirname $FILE)' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-vet-repo-mod",
            "name": "go-vet-repo-mod",
            "entry": "go-vet-repo-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root); go vet [$ARGS] ./...' for each module in the repo",
            "pass_filenames": false
        },
        {
            "id": "go-vet-repo-pkg",
            "name": "go-vet-repo-pkg",
            "entry": "go-vet-repo-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'go vet [$ARGS] ./...' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "go-vet",
            "name": "go-vet",
            "entry": "go-vet.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'go vet [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "golangci-lint-mod",
            "name": "golangci-lint-mod",
            "entry": "golangci-lint-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root $FILE); golangci-lint run [$ARGS] ./...' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "golangci-lint-pkg",
            "name": "golangci-lint-pkg",
            "entry": "golangci-lint-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'golangci-lint run [$ARGS] ./$(dirname $FILE)' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "golangci-lint-repo-mod",
            "name": "golangci-lint-repo-mod",
            "entry": "golangci-lint-repo-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root); golangci-lint run [$ARGS] ./...' for each module in the repo",
            "pass_filenames": false
        },
        {
            "id": "golangci-lint-repo-pkg",
            "name": "golangci-lint-repo-pkg",
            "entry": "golangci-lint-repo-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'golangci-lint run [$ARGS] ./...' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "golangci-lint",
            "name": "golangci-lint",
            "entry": "golangci-lint.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'golangci-lint run [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        }
    ],
    "https://github.com/markdownlint/markdownlint": [
        {
            "id": "markdownlint",
            "name": "Markdownlint",
            "description": "Run markdownlint on your Markdown files",
            "entry": "mdl",
            "language": "ruby",
            "files": "\\.(md|mdown|markdown)$"
        },
        {
            "id": "markdownlint_docker",
            "name": "Markdownlint Docker",
            "description": "Run markdown lint on your Markdown files using the project docker image",
            "language": "docker_image",
            "files": "\\.(md|mdown|markdown)$",
            "entry": "markdownlint/markdownlint"
        }
    ],
    "https://github.com/jguttman94/pre-commit-gradle": [
        {
            "id": "gradle-check",
            "name": "gradle check",
            "description": "Runs java unit tests using gradle check",
            "entry": "gradle-check",
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "gradle-build",
            "name": "gradle build",
            "description": "Builds java project using \"gradle build\"",
            "entry": "gradle-build",
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "gradle-spotless",
            "name": "gradle spotless",
            "description": "Lints the project using \"gradle spotlessCheck spotlessApply\"",
            "entry": "gradle-spotless",
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "gradle-task",
            "name": "gradle task",
            "description": "Runs arbitrary gradle tasks for java project",
            "entry": "gradle-task",
            "language": "python",
            "pass_filenames": false
        }
    ],
    "https://github.com/Yelp/detect-secrets": [
        {
            "id": "detect-secrets",
            "name": "Detect secrets",
            "description": "Detects high entropy strings that are likely to be passwords.",
            "entry": "detect-secrets-hook",
            "language": "python",
            "files": ".*"
        }
    ],
    "https://github.com/dmitri-lerko/pre-commit-docker-kustomize": [
        {
            "id": "kustomize",
            "name": "kustomize (via docker)",
            "description": "kustomize provided by docker",
            "entry": "kustomize build",
            "language": "docker",
            "args": [
                "overlay/production-us"
            ],
            "always_run": true,
            "pass_filenames": false
        }
    ],
    "https://github.com/perltidy/perltidy": [
        {
            "id": "perltidy",
            "name": "perltidy",
            "description": "Run the perltidy source code formatter on Perl source files",
            "minimum_pre_commit_version": "2.1.0",
            "entry": "perltidy --nostandard-output --backup-and-modify-in-place",
            "args": [
                "--standard-error-output",
                "--backup-file-extension=/"
            ],
            "language": "perl",
            "types": [
                "perl"
            ]
        }
    ],
    "https://github.com/talos-systems/conform": [
        {
            "id": "conform",
            "name": "Conform",
            "description": "Run 'conform enforce' for policy enforcement",
            "entry": "conform enforce --commit-msg-file",
            "language": "golang",
            "stages": [
                "commit-msg"
            ]
        }
    ],
    "https://github.com/twu/skjold": [
        {
            "id": "skjold",
            "name": "skjold",
            "description": "Security audit Python project dependencies against security advisory databases.",
            "entry": "skjold audit",
            "language": "python",
            "language_version": "python3",
            "require_serial": true,
            "files": "(poetry\\.lock|Pipfile\\.lock|requirements.*\\.txt)$"
        }
    ],
    "https://github.com/commitizen-tools/commitizen": [
        {
            "id": "commitizen",
            "name": "commitizen check",
            "description": "Check whether the current commit message follows committing rules. Allow empty commit messages by default, because they typically indicate to Git that the commit should be aborted.\n",
            "entry": "cz check",
            "args": [
                "--allow-abort",
                "--commit-msg-file"
            ],
            "stages": [
                "commit-msg"
            ],
            "language": "python",
            "language_version": "python3",
            "minimum_pre_commit_version": "1.4.3"
        },
        {
            "id": "commitizen-branch",
            "name": "commitizen check branch",
            "description": "Check all commit messages that are already on the current branch but not the default branch on the origin repository. Useful for checking messages after the fact (e.g., pre-push or in CI) without an expensive check of the entire repository history.\n",
            "entry": "cz check",
            "args": [
                "--rev-range",
                "origin/HEAD..HEAD"
            ],
            "always_run": true,
            "pass_filenames": false,
            "language": "python",
            "language_version": "python3",
            "minimum_pre_commit_version": "1.4.3"
        }
    ],
    "https://github.com/gherynos/pre-commit-java": [
        {
            "id": "pmd",
            "name": "pmd",
            "description": "Runs the PMD static code analyzer.",
            "language": "docker",
            "entry": "/bin/bash /opt/run_pmd.sh",
            "files": "\\.java$",
            "require_serial": true
        },
        {
            "id": "cpd",
            "name": "cpd",
            "description": "Runs the Copy/Paste Detector (CPD).",
            "language": "docker",
            "entry": "/bin/bash /opt/run_cpd.sh",
            "files": "\\.java$",
            "require_serial": true
        },
        {
            "id": "checkstyle",
            "name": "checkstyle",
            "description": "Runs the Checkstyle static code analysis tool.",
            "language": "docker",
            "entry": "/bin/bash /opt/run_checkstyle.sh",
            "files": "\\.java$",
            "require_serial": true
        }
    ],
    "https://github.com/lietu/go-pre-commit": [
        {
            "id": "errcheck",
            "name": "errcheck",
            "entry": "go-pre-commit errcheck",
            "files": "\\.go$",
            "language": "system",
            "description": "Check your Go source code with errcheck"
        },
        {
            "id": "go-fmt-goimports",
            "name": "go-fmt-goimports",
            "entry": "go-pre-commit go-fmt-goimports",
            "files": "\\.go$",
            "language": "system",
            "description": "Format your Go code with go fmt and goimports"
        },
        {
            "id": "go-test",
            "name": "go-test",
            "entry": "go-pre-commit go-test",
            "files": "\\.go$",
            "language": "system",
            "description": "Run your Go unit tests"
        },
        {
            "id": "go-vet",
            "name": "go-vet",
            "entry": "go-pre-commit go-vet",
            "files": "\\.go$",
            "language": "system",
            "description": "Check your Go source with go vet"
        },
        {
            "id": "gofumports",
            "name": "gofumports",
            "entry": "go-pre-commit gofumports",
            "files": "\\.go$",
            "language": "system",
            "description": "Format your Go code with gofumports"
        },
        {
            "id": "gofumpt",
            "name": "gofumpt",
            "entry": "go-pre-commit gofumpt",
            "files": "\\.go$",
            "language": "system",
            "description": "Format your Go code with gofumpt"
        },
        {
            "id": "golangci-lint",
            "name": "golangci-lint",
            "entry": "go-pre-commit golangci-lint",
            "files": "\\.go$",
            "language": "system",
            "description": "Check your Go code with golangci-lint"
        },
        {
            "id": "golint",
            "name": "golint",
            "entry": "go-pre-commit golint",
            "files": "\\.go$",
            "language": "system",
            "description": "Check your Go code with golint"
        },
        {
            "id": "staticcheck",
            "name": "staticcheck",
            "entry": "go-pre-commit staticcheck",
            "files": "\\.go$",
            "language": "system",
            "description": "Check your Go code with staticcheck"
        },
        {
            "id": "go-mod-tidy",
            "name": "go-mod-tidy",
            "entry": "go-pre-commit go-mod-tidy",
            "files": "",
            "language": "system",
            "description": "Prune no-longer required commits from go.mod"
        }
    ],
    "https://github.com/macisamuele/language-formatters-pre-commit-hooks": [
        {
            "id": "pretty-format-golang",
            "name": "Go Formatter",
            "description": "Runs gofmt over golang source files.",
            "entry": "pretty-format-golang",
            "language": "python",
            "types": [
                "go"
            ],
            "minimum_pre_commit_version": "1"
        },
        {
            "id": "pretty-format-ini",
            "name": "Pretty format INI",
            "description": "This hook sets a standard for formatting INI files.",
            "entry": "pretty-format-ini",
            "language": "python",
            "types": [
                "ini"
            ],
            "minimum_pre_commit_version": "1"
        },
        {
            "id": "pretty-format-java",
            "name": "Google Java Formatter",
            "description": "Runs Google Java Formatter over Java source files",
            "entry": "pretty-format-java",
            "language": "python",
            "types": [
                "java"
            ],
            "require_serial": true,
            "minimum_pre_commit_version": "1"
        },
        {
            "id": "pretty-format-kotlin",
            "name": "KTLint",
            "description": "Runs KTLint (or ktfmt) over Kotlin source files",
            "entry": "pretty-format-kotlin",
            "language": "python",
            "types": [
                "kotlin"
            ],
            "minimum_pre_commit_version": "1",
            "require_serial": true
        },
        {
            "id": "pretty-format-rust",
            "name": "cargo-fmt",
            "description": "Runs cargo fmt over Rust source files",
            "entry": "pretty-format-rust",
            "language": "python",
            "types": [
                "rust"
            ],
            "minimum_pre_commit_version": "1"
        },
        {
            "id": "pretty-format-toml",
            "name": "Pretty format TOML",
            "description": "This hook sets a standard for formatting TOML files.",
            "entry": "pretty-format-toml",
            "language": "python",
            "types": [
                "toml"
            ],
            "minimum_pre_commit_version": "1"
        },
        {
            "id": "pretty-format-yaml",
            "name": "Pretty format YAML",
            "description": "This hook sets a standard for formatting YAML files.",
            "entry": "pretty-format-yaml",
            "language": "python",
            "types": [
                "yaml"
            ],
            "minimum_pre_commit_version": "1"
        }
    ],
    "https://github.com/jlebar/pre-commit-hooks": [
        {
            "id": "bazel-buildifier",
            "name": "bazel buildifier",
            "description": "Runs `buildifier`, requires buildifier binary",
            "entry": "buildifier",
            "files": "^(.*/)?(BUILD\\.bazel|BUILD|WORKSPACE|WORKSPACE\\.bzlmod)$|\\.BUILD$|\\.bzl$",
            "language": "system"
        },
        {
            "id": "do-not-submit",
            "name": "DO NOT SUBMIT",
            "description": "Forbids the string \"DO NOT SUBMIT\".",
            "entry": "check_do_not_submit.py",
            "language": "script",
            "files": ".*"
        },
        {
            "id": "clang-format-diff",
            "name": "clang-format-diff",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "16.0.0",
                "diff"
            ],
            "require_serial": true
        },
        {
            "id": "clang-format-whole-file",
            "name": "clang-format-whole-file",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "16.0.0",
                "whole-file"
            ],
            "require_serial": false
        },
        {
            "id": "clang-format-diff-3.6.0",
            "name": "clang-format-diff-3.6.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "3.6.0",
                "diff"
            ],
            "require_serial": true
        },
        {
            "id": "clang-format-whole-file-3.6.0",
            "name": "clang-format-whole-file-3.6.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "3.6.0",
                "whole-file"
            ],
            "require_serial": false
        },
        {
            "id": "clang-format-diff-3.7.0",
            "name": "clang-format-diff-3.7.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "3.7.0",
                "diff"
            ],
            "require_serial": true
        },
        {
            "id": "clang-format-whole-file-3.8.0",
            "name": "clang-format-whole-file-3.8.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "3.8.0",
                "whole-file"
            ],
            "require_serial": false
        },
        {
            "id": "clang-format-diff-3.9.0",
            "name": "clang-format-diff-3.9.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "3.9.0",
                "diff"
            ],
            "require_serial": true
        },
        {
            "id": "clang-format-whole-file-3.9.0",
            "name": "clang-format-whole-file-3.9.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "3.9.0",
                "whole-file"
            ],
            "require_serial": false
        },
        {
            "id": "clang-format-diff-4.0.0",
            "name": "clang-format-diff-4.0.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "4.0.0",
                "diff"
            ],
            "require_serial": true
        },
        {
            "id": "clang-format-whole-file-4.0.0",
            "name": "clang-format-whole-file-4.0.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "4.0.0",
                "whole-file"
            ],
            "require_serial": false
        },
        {
            "id": "clang-format-diff-5.0.0",
            "name": "clang-format-diff-5.0.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "5.0.0",
                "diff"
            ],
            "require_serial": true
        },
        {
            "id": "clang-format-whole-file-5.0.0",
            "name": "clang-format-whole-file-5.0.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "5.0.0",
                "whole-file"
            ],
            "require_serial": false
        },
        {
            "id": "clang-format-diff-8.0.0",
            "name": "clang-format-diff-8.0.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "8.0.0",
                "diff"
            ],
            "require_serial": true
        },
        {
            "id": "clang-format-whole-file-8.0.0",
            "name": "clang-format-whole-file-8.0.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "8.0.0",
                "whole-file"
            ],
            "require_serial": false
        },
        {
            "id": "clang-format-diff-11.0.0",
            "name": "clang-format-diff-11.0.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "11.0.0",
                "diff"
            ],
            "require_serial": true
        },
        {
            "id": "clang-format-whole-file-11.0.0",
            "name": "clang-format-whole-file-11.0.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "11.0.0",
                "whole-file"
            ],
            "require_serial": false
        },
        {
            "id": "clang-format-diff-15.0.0",
            "name": "clang-format-diff-15.0.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "15.0.0",
                "diff"
            ],
            "require_serial": true
        },
        {
            "id": "clang-format-whole-file-15.0.0",
            "name": "clang-format-whole-file-15.0.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "15.0.0",
                "whole-file"
            ],
            "require_serial": false
        },
        {
            "id": "clang-format-diff-16.0.0",
            "name": "clang-format-diff-16.0.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "16.0.0",
                "diff"
            ],
            "require_serial": true
        },
        {
            "id": "clang-format-whole-file-16.0.0",
            "name": "clang-format-whole-file-16.0.0",
            "entry": "clang_format.py",
            "language": "script",
            "args": [
                "16.0.0",
                "whole-file"
            ],
            "require_serial": false
        }
    ],
    "https://github.com/jazzband/pip-tools": [
        {
            "id": "pip-compile",
            "name": "pip-compile",
            "description": "Automatically compile requirements.",
            "entry": "pip-compile",
            "language": "python",
            "files": "^requirements\\.(in|txt)$",
            "pass_filenames": false
        }
    ],
    "https://github.com/pappasam/toml-sort": [
        {
            "id": "toml-sort",
            "name": "toml-sort",
            "entry": "toml-sort",
            "args": [
                "--check"
            ],
            "language": "python",
            "types": [
                "toml"
            ]
        },
        {
            "id": "toml-sort-fix",
            "name": "toml-sort-fix",
            "entry": "toml-sort",
            "args": [
                "--in-place"
            ],
            "language": "python",
            "types": [
                "toml"
            ]
        }
    ],
    "https://github.com/arenadotio/pre-commit-ocamlformat": [
        {
            "id": "ocamlformat",
            "name": "ocamlformat",
            "description": "Auto-formatter for OCaml code",
            "entry": "ocamlformat",
            "language": "system",
            "files": "\\.mli?$",
            "args": [
                "-i"
            ]
        }
    ],
    "https://github.com/hcodes/yaspeller": [
        {
            "id": "yaspeller",
            "name": "yaspeller",
            "entry": "yaspeller",
            "language": "node",
            "types": [
                "text"
            ]
        }
    ],
    "https://github.com/maltzj/google-style-precommit-hook": [
        {
            "id": "google-style-java",
            "name": "Google Java Code Style for Java",
            "description": "Formats code in Google's Java codestyle.",
            "entry": "./format-code.sh",
            "language": "script",
            "files": "\\.java$"
        }
    ],
    "https://github.com/jvstein/pre-commit-dotnet-format": [
        {
            "id": "dotnet-format",
            "name": "dotnet-format",
            "language": "docker_image",
            "files": "\\.cs",
            "entry": "registry.hub.docker.com/jvstein/pre-commit-dotnet-format:v0.3"
        }
    ],
    "https://github.com/PeterMosmans/jenkinslint": [
        {
            "id": "jenkinslint",
            "name": "Lint Jenkinsfile",
            "description": "Validates Jenkinsfiles using a Jenkins server",
            "entry": "jenkinslint",
            "language": "script",
            "files": "^Jenkinsfile"
        }
    ],
    "https://github.com/nicklockwood/SwiftFormat": [
        {
            "id": "swiftformat",
            "name": "SwiftFormat",
            "description": "Check swift files for formatting issues with SwiftFormat",
            "entry": "swiftformat",
            "language": "swift",
            "types": [
                "swift"
            ]
        }
    ],
    "https://github.com/executablebooks/mdformat": [
        {
            "id": "mdformat",
            "name": "mdformat",
            "description": "CommonMark compliant Markdown formatter",
            "entry": "mdformat",
            "language": "python",
            "types": [
                "markdown"
            ],
            "minimum_pre_commit_version": "1.0.0"
        }
    ],
    "https://gitlab.com/daverona/pre-commit/php": [
        {
            "id": "phpmd",
            "name": "PHP Mess Detector",
            "description": "Run `phpmd` to find possible bugs, suboptimal code, overcomplicated expressions, and so on",
            "language": "script",
            "files": "\\.php$",
            "entry": "pre-commit-hooks/phpmd.sh",
            "args": [
                "ansi",
                "cleancode,codesize,controversial,design,naming,unusedcode"
            ]
        },
        {
            "id": "docker-phpmd",
            "name": "PHP Mess Detector",
            "description": "Run `phpmd` to find possible bugs, suboptimal code, overcomplicated expressions, and so on",
            "language": "docker_image",
            "files": "\\.php$",
            "entry": "daverona/pre-commit-php:0.6.0 phpmd.sh",
            "args": [
                "ansi",
                "cleancode,codesize,controversial,design,naming,unusedcode"
            ]
        }
    ],
    "https://github.com/anderseknert/pre-commit-opa": [
        {
            "id": "opa-test",
            "name": "OPA test",
            "description": "Runs OPA unit tests on rego source files",
            "entry": "opa test",
            "args": [
                "."
            ],
            "pass_filenames": false,
            "language": "system",
            "files": "(\\.rego)$"
        },
        {
            "id": "opa-fmt",
            "name": "OPA fmt",
            "description": "Formats Rego policy using opa fmt",
            "entry": "opa fmt",
            "args": [
                "-w"
            ],
            "language": "system",
            "files": "(\\.rego)$"
        },
        {
            "id": "opa-check",
            "name": "OPA check",
            "description": "Check syntax of staged Rego files",
            "entry": "opa check",
            "args": [
                ".",
                "--strict"
            ],
            "pass_filenames": false,
            "language": "system",
            "files": "(\\.rego)$"
        },
        {
            "id": "conftest-test",
            "name": "Conftest test",
            "description": "Run `conftest test` on staged config files",
            "entry": "conftest test",
            "language": "system",
            "files": "(\\.rego|\\.yml|\\.yaml|\\.json|\\.ini|\\.toml|\\.conf|\\.hcl|\\.cue|\\.edn|\\.vcl|\\.xml|\\.jsonnet|Dockerfile)$"
        },
        {
            "id": "conftest-fmt",
            "name": "Conftest fmt",
            "description": "Run `conftest fmt` on staged Rego files",
            "entry": "conftest fmt",
            "language": "system",
            "args": [
                "."
            ],
            "files": "(\\.rego)$"
        },
        {
            "id": "conftest-verify",
            "name": "Conftest verify",
            "description": "Run `conftest verify` on rego files",
            "entry": "conftest verify",
            "args": [
                "."
            ],
            "pass_filenames": false,
            "language": "system",
            "files": "(\\.rego)$"
        }
    ],
    "https://github.com/radix-ai/auto-smart-commit": [
        {
            "id": "auto-smart-commit",
            "name": "Auto Jira smart commit",
            "description": "Automatically transform your Git commit messages into Jira smart commits",
            "entry": "auto-smart-commit",
            "language": "python",
            "stages": [
                "prepare-commit-msg"
            ],
            "always_run": true
        }
    ],
    "https://github.com/thibaudcolas/curlylint": [
        {
            "id": "curlylint",
            "name": "curlylint",
            "description": "A linter which checks the indentation and the correctness of Jinja-like/HTML templates.",
            "language": "python",
            "language_version": "python3",
            "entry": "curlylint",
            "types_or": [
                "html",
                "jinja",
                "twig"
            ],
            "require_serial": true
        }
    ],
    "https://github.com/cheshirekow/cmake-format-precommit": [
        {
            "id": "cmake-format",
            "name": "cmake-format",
            "description": "cmake-format can format your listfiles nicely so that they don't look like crap.",
            "entry": "cmake-format",
            "args": [
                "--in-place"
            ],
            "language": "python",
            "types": [
                "cmake"
            ]
        },
        {
            "id": "cmake-lint",
            "name": "cmake-lint",
            "description": "cmake-lint will check your listfiles for style violations, common mistakes, and anti-patterns.",
            "entry": "cmake-lint",
            "language": "python",
            "types": [
                "cmake"
            ]
        }
    ],
    "https://github.com/aorumbayev/pydantic-to-schema": [
        {
            "id": "pydantic-to-schema",
            "name": "Convert pydantic models to json schemas",
            "description": "Converts models from input path to output path as schemas",
            "entry": "pydantic-to-schema",
            "language": "python",
            "types": [
                "python"
            ],
            "pass_filenames": false
        }
    ],
    "https://github.com/hadialqattan/pycln": [
        {
            "id": "pycln",
            "name": "pycln",
            "description": "A formatter for finding and removing unused import statements.",
            "entry": "pycln",
            "language": "python",
            "language_version": "python3",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/nbQA-dev/nbQA": [
        {
            "id": "nbqa",
            "name": "nbqa",
            "description": "Run any standard Python code quality tool on a Jupyter Notebook",
            "entry": "nbqa",
            "language": "python",
            "require_serial": true,
            "types_or": [
                "jupyter",
                "markdown"
            ]
        },
        {
            "id": "nbqa-black",
            "name": "nbqa-black",
            "description": "Run 'black' on a Jupyter Notebook",
            "entry": "nbqa black",
            "language": "python",
            "require_serial": true,
            "types_or": [
                "jupyter",
                "markdown"
            ],
            "additional_dependencies": [
                "black"
            ]
        },
        {
            "id": "nbqa-check-ast",
            "name": "nbqa-check-ast",
            "description": "Run 'check-ast' on a Jupyter Notebook",
            "entry": "nbqa pre_commit_hooks.check_ast",
            "language": "python",
            "require_serial": true,
            "types_or": [
                "jupyter",
                "markdown"
            ],
            "additional_dependencies": [
                "pre-commit-hooks"
            ],
            "args": [
                "--nbqa-dont-skip-bad-cells"
            ]
        },
        {
            "id": "nbqa-flake8",
            "name": "nbqa-flake8",
            "description": "Run 'flake8' on a Jupyter Notebook",
            "entry": "nbqa flake8",
            "language": "python",
            "require_serial": true,
            "types_or": [
                "jupyter",
                "markdown"
            ],
            "additional_dependencies": [
                "flake8"
            ]
        },
        {
            "id": "nbqa-isort",
            "name": "nbqa-isort",
            "description": "Run 'isort' on a Jupyter Notebook",
            "entry": "nbqa isort",
            "language": "python",
            "require_serial": true,
            "types_or": [
                "jupyter",
                "markdown"
            ],
            "additional_dependencies": [
                "isort"
            ]
        },
        {
            "id": "nbqa-mypy",
            "name": "nbqa-mypy",
            "description": "Run 'mypy' on a Jupyter Notebook",
            "entry": "nbqa mypy",
            "language": "python",
            "require_serial": true,
            "types_or": [
                "jupyter",
                "markdown"
            ],
            "additional_dependencies": [
                "mypy"
            ]
        },
        {
            "id": "nbqa-pylint",
            "name": "nbqa-pylint",
            "description": "Run 'pylint' on a Jupyter Notebook",
            "entry": "nbqa pylint",
            "language": "python",
            "require_serial": true,
            "types_or": [
                "jupyter",
                "markdown"
            ],
            "additional_dependencies": [
                "pylint"
            ]
        },
        {
            "id": "nbqa-pyupgrade",
            "name": "nbqa-pyupgrade",
            "description": "Run 'pyupgrade' on a Jupyter Notebook",
            "entry": "nbqa pyupgrade",
            "language": "python",
            "require_serial": true,
            "types_or": [
                "jupyter",
                "markdown"
            ],
            "additional_dependencies": [
                "pyupgrade"
            ]
        },
        {
            "id": "nbqa-yapf",
            "name": "nbqa-yapf",
            "description": "Run 'yapf' on a Jupyter Notebook",
            "entry": "nbqa yapf --in-place",
            "language": "python",
            "require_serial": true,
            "types_or": [
                "jupyter",
                "markdown"
            ],
            "additional_dependencies": [
                "yapf"
            ]
        },
        {
            "id": "nbqa-autopep8",
            "name": "nbqa-autopep8",
            "description": "Run 'autopep8' on a Jupyter Notebook",
            "entry": "nbqa autopep8 -i",
            "language": "python",
            "require_serial": true,
            "types_or": [
                "jupyter",
                "markdown"
            ],
            "additional_dependencies": [
                "autopep8"
            ]
        },
        {
            "id": "nbqa-pydocstyle",
            "name": "nbqa-pydocstyle",
            "description": "Run 'pydocstyle' on a Jupyter Notebook",
            "entry": "nbqa pydocstyle",
            "language": "python",
            "require_serial": true,
            "types_or": [
                "jupyter",
                "markdown"
            ],
            "additional_dependencies": [
                "pydocstyle"
            ]
        },
        {
            "id": "nbqa-ruff",
            "name": "nbqa-ruff",
            "description": "Run 'ruff' on a Jupyter Notebook",
            "entry": "nbqa ruff",
            "language": "python",
            "additional_dependencies": [
                "ruff"
            ],
            "require_serial": true,
            "types_or": [
                "jupyter",
                "markdown"
            ]
        }
    ],
    "https://github.com/Scony/godot-gdscript-toolkit": [
        {
            "id": "gdlint",
            "name": "gdlint",
            "description": "gdlint - linter for GDScript",
            "entry": "gdlint",
            "language": "python",
            "language_version": "python3",
            "require_serial": true,
            "types": [
                "gdscript"
            ]
        },
        {
            "id": "gdformat",
            "name": "gdformat",
            "description": "gdformat - formatter for GDScript",
            "entry": "gdformat",
            "language": "python",
            "language_version": "python3",
            "require_serial": true,
            "types": [
                "gdscript"
            ]
        }
    ],
    "https://github.com/avilaton/add-msg-issue-prefix-hook": [
        {
            "id": "add-msg-issue-prefix",
            "name": "Add issue as commit message prefix",
            "description": "Searches the branch name for something looking like a jira issue name and prepends the commit message with it",
            "entry": "add-msg-issue-prefix",
            "language": "python",
            "always_run": true,
            "stages": [
                "prepare-commit-msg"
            ]
        }
    ],
    "https://github.com/dustinsand/pre-commit-jvm": [
        {
            "id": "detekt",
            "name": "Detekt",
            "description": "Runs the Detekt static code analyzer on Kotlin source files.",
            "language": "coursier",
            "entry": "detekt",
            "pass_filenames": false,
            "files": "\\.kt$",
            "require_serial": true
        },
        {
            "id": "google-java-formatter-jdk8",
            "name": "Google Java Formatter",
            "description": "Runs the Google Java Formatter on Java source files. Minimum supported runtime version is JDK 8.",
            "language": "coursier",
            "entry": "google-java-format-jdk8",
            "files": "\\.java$",
            "require_serial": true
        },
        {
            "id": "google-java-formatter-jdk11",
            "name": "Google Java Formatter",
            "description": "Runs the Google Java Formatter on Java source files. Minimum supported runtime version is JDK 11.",
            "language": "coursier",
            "entry": "google-java-format-jdk11 -J--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED -J--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED -J--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED -J--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED -J--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED -J--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
            "files": "\\.java$",
            "require_serial": true
        },
        {
            "id": "ktlint",
            "name": "ktlint",
            "description": "Runs the ktlint linter and formatter on Kotlin source files.",
            "language": "coursier",
            "entry": "ktlint -J--add-opens=java.base/java.lang=ALL-UNNAMED",
            "files": "\\.kt$",
            "require_serial": true
        },
        {
            "id": "pmd",
            "name": "PMD",
            "description": "Runs the PMD static code analyzer on Java source files.",
            "language": "coursier",
            "entry": "pmd",
            "pass_filenames": false,
            "files": "\\.java$",
            "require_serial": true
        }
    ],
    "https://github.com/alan-turing-institute/CleverCSV-pre-commit": [
        {
            "id": "clevercsv-standardize",
            "name": "CleverCSV Standardize",
            "entry": "clevercsv standardize",
            "language": "python",
            "types": [
                "csv"
            ],
            "args": [
                "--in-place"
            ],
            "require_serial": false,
            "additional_dependencies": []
        }
    ],
    "https://gitlab.com/jvenom/elixir-pre-commit-hooks": [
        {
            "id": "mix-format",
            "name": "mix format",
            "description": "Formats Elixir files with mix format.",
            "language": "system",
            "entry": "mix format",
            "files": "\\.exs?$"
        },
        {
            "id": "mix-test",
            "name": "mix test",
            "description": "Runs Elixir tests with mix test.",
            "language": "system",
            "entry": "mix test",
            "files": "\\.ex$"
        }
    ],
    "https://github.com/Cretezy/flutter-format-pre-commit": [
        {
            "id": "flutter-format",
            "name": "Format Flutter Code",
            "entry": "run",
            "language": "script",
            "files": "\\.dart$"
        }
    ],
    "https://github.com/dluksza/flutter-analyze-pre-commit": [
        {
            "id": "flutter-analyze",
            "name": "Flutter Code Analyze",
            "entry": "run",
            "language": "script",
            "files": "\\.dart$"
        },
        {
            "id": "dart-format",
            "name": "Dart Code format",
            "entry": "rundartformat",
            "language": "script",
            "files": "\\.dart$"
        }
    ],
    "https://github.com/fluttercommunity/import_sorter": [
        {
            "id": "dart-import-sorter",
            "name": "Dart Import Sorter",
            "entry": "dart pub run import_sorter",
            "language": "system",
            "types": [
                "dart"
            ],
            "require_serial": true,
            "description": "Dart package to automatically organize your dart imports. Any dart project supported!    \nWill sort imports alphabetically and then group them in the following order:\n1. Dart imports\n2. Flutter imports\n3. Package imports\n4. Project imports\n"
        },
        {
            "id": "flutter-import-sorter",
            "name": "Flutter Import Sorter",
            "entry": "flutter pub run import_sorter",
            "language": "system",
            "types": [
                "dart"
            ],
            "require_serial": true,
            "description": "Dart package to automatically organize your dart imports. Any dart project supported!    \nWill sort imports alphabetically and then group them in the following order:\n1. Dart imports\n2. Flutter imports\n3. Package imports\n4. Project imports\n"
        }
    ],
    "https://github.com/editorconfig-checker/editorconfig-checker.python": [
        {
            "id": "editorconfig-checker",
            "name": "Check .editorconfig rules",
            "description": "`editorconfig-checker` is a tool to check if your files consider your .editorconfig-rules.",
            "entry": "ec",
            "language": "python",
            "types": [
                "text"
            ],
            "require_serial": true
        },
        {
            "id": "editorconfig-checker-system",
            "name": "Check .editorconfig rules",
            "description": "Runs system executable of `editorconfig-checker` to lint text files according to `.editorconfig` rules",
            "language": "system",
            "entry": "ec",
            "types": [
                "text"
            ],
            "require_serial": true
        }
    ],
    "https://gitlab.com/pablodiehl/pre-commit-lua-formatter": [
        {
            "id": "lua-formatter",
            "name": "Lua Formatter",
            "description": "Formats Lua files using Lua Formatter.",
            "entry": "luaformatter -a",
            "language": "system",
            "types": [
                "file",
                "lua"
            ]
        }
    ],
    "https://github.com/frnmst/md-toc": [
        {
            "id": "md-toc",
            "name": "Update markdown table of contents",
            "description": "Automatically generate and add a table of contents to markdown files",
            "language": "python",
            "types": [
                "markdown"
            ],
            "entry": "md_toc",
            "args": [
                "-p",
                "github"
            ]
        }
    ],
    "https://github.com/mgedmin/check-manifest": [
        {
            "id": "check-manifest",
            "name": "check-manifest",
            "description": "Check the completeness of MANIFEST.in for Python packages.",
            "entry": "check-manifest",
            "language": "python",
            "language_version": "python3",
            "pass_filenames": false,
            "always_run": true
        }
    ],
    "https://github.com/PrincetonUniversity/blocklint": [
        {
            "id": "blocklint",
            "name": "blocklint",
            "description": "`blocklint` is a command-line utility for inclusive language highlighting.",
            "entry": "blocklint",
            "language": "python",
            "types": [
                "text"
            ]
        }
    ],
    "https://github.com/python-jsonschema/check-jsonschema": [
        {
            "id": "check-jsonschema",
            "name": "Validate files with jsonschema",
            "description": "Validate JSON or YAML files against a jsonschema on disk or fetched via HTTP(S)",
            "entry": "check-jsonschema",
            "language": "python",
            "types_or": [
                "json",
                "yaml"
            ],
            "minimum_pre_commit_version": "2.9.0"
        },
        {
            "id": "check-metaschema",
            "name": "Validate JSON Schema files",
            "description": "Validate JSON Schema files against their matching metaschema",
            "entry": "check-jsonschema --check-metaschema",
            "language": "python",
            "types_or": [
                "json",
                "yaml"
            ],
            "minimum_pre_commit_version": "2.9.0"
        },
        {
            "id": "check-azure-pipelines",
            "name": "Validate Azure Pipelines",
            "description": "Validate Azure Pipelines config against the schema provided by Microsoft",
            "entry": "check-jsonschema --builtin-schema vendor.azure-pipelines --data-transform azure-pipelines",
            "language": "python",
            "files": "^(\\.)?azure-pipelines\\.(yml|yaml)$",
            "types": [
                "yaml"
            ]
        },
        {
            "id": "check-bamboo-spec",
            "name": "Validate Bamboo Specs",
            "description": "Validate Bamboo Specs against the schema provided by SchemaStore",
            "entry": "check-jsonschema --builtin-schema vendor.bamboo-spec",
            "language": "python",
            "files": "^bamboo-specs/.*\\.(yml|yaml)$",
            "types": [
                "yaml"
            ]
        },
        {
            "id": "check-bitbucket-pipelines",
            "name": "Validate Bitbucket Pipelines",
            "description": "Validate Bitbucket Pipelines against the schema provided by SchemaStore",
            "entry": "check-jsonschema --builtin-schema vendor.bitbucket-pipelines",
            "language": "python",
            "files": "bitbucket-pipelines\\.(yml|yaml)$",
            "types": [
                "yaml"
            ]
        },
        {
            "id": "check-buildkite",
            "name": "Validate Buildkite Pipelines",
            "description": "Validate Buildkite Pipelines against the schema provided by Buildkite",
            "entry": "check-jsonschema --builtin-schema vendor.buildkite",
            "language": "python",
            "files": "(?x)^(\n  buildkite\\.(yml|yaml|json)|\n  buildkite\\.(.+)\\.(yml|yaml|json)|\n  (.*/)?\\.buildkite/pipeline\\.(yml|yaml|json)|\n  (.*/)?\\.buildkite/pipeline\\.(.+)\\.(yml|yaml|json)\n)$\n",
            "types_or": [
                "json",
                "yaml"
            ]
        },
        {
            "id": "check-cloudbuild",
            "name": "Validate Google Cloud Build config",
            "description": "Validate Google Cloud Build config against the schema provided by SchemaStore",
            "entry": "check-jsonschema --builtin-schema vendor.cloudbuild",
            "language": "python",
            "files": "^cloudbuild\\.(yml|yaml|json)$",
            "types_or": [
                "json",
                "yaml"
            ]
        },
        {
            "id": "check-dependabot",
            "name": "Validate Dependabot Config (v2)",
            "description": "Validate Dependabot Config (v2) against the schema provided by SchemaStore",
            "entry": "check-jsonschema --builtin-schema vendor.dependabot",
            "language": "python",
            "files": "^\\.github/dependabot\\.(yml|yaml)$",
            "types": [
                "yaml"
            ]
        },
        {
            "id": "check-drone-ci",
            "name": "Validate Drone-CI Config",
            "description": "Validate Drone-CI Config against the schema provided by SchemaStore",
            "entry": "check-jsonschema --builtin-schema vendor.drone-ci",
            "language": "python",
            "files": "^\\.drone\\.yml$",
            "types": [
                "yaml"
            ]
        },
        {
            "id": "check-github-actions",
            "name": "Validate GitHub Actions",
            "description": "Validate GitHub Actions against the schema provided by SchemaStore",
            "entry": "check-jsonschema --builtin-schema vendor.github-actions",
            "language": "python",
            "files": "(?x)^(\n  action\\.(yml|yaml)|\n  \\.github/actions/(.+/)?action\\.(yml|yaml)\n)$\n",
            "types": [
                "yaml"
            ]
        },
        {
            "id": "check-github-workflows",
            "name": "Validate GitHub Workflows",
            "description": "Validate GitHub Workflows against the schema provided by SchemaStore",
            "entry": "check-jsonschema --builtin-schema vendor.github-workflows",
            "language": "python",
            "files": "^\\.github/workflows/[^/]+$",
            "types": [
                "yaml"
            ]
        },
        {
            "id": "check-gitlab-ci",
            "name": "Validate GitLab CI config",
            "description": "Validate GitLab CI config against the schema provided by SchemaStore",
            "entry": "check-jsonschema --builtin-schema vendor.gitlab-ci --data-transform gitlab-ci",
            "language": "python",
            "files": "^.*\\.gitlab-ci\\.yml$",
            "types": [
                "yaml"
            ]
        },
        {
            "id": "check-readthedocs",
            "name": "Validate ReadTheDocs Config",
            "description": "Validate ReadTheDocs config against the schema provided by ReadTheDocs",
            "entry": "check-jsonschema --builtin-schema vendor.readthedocs",
            "language": "python",
            "files": "^\\.readthedocs\\.(yml|yaml)$",
            "types": [
                "yaml"
            ]
        },
        {
            "id": "check-renovate",
            "name": "Validate Renovate Config",
            "description": "Validate Renovate config against the schema provided by Renovate (does not support renovate config in package.json)",
            "entry": "check-jsonschema --builtin-schema vendor.renovate",
            "language": "python",
            "files": "(?x)^(\n  renovate\\.(json|json5)|\n  \\.(github|gitlab)/renovate\\.(json|json5)|\n  \\.renovaterc(\\.json)?\n)$\n"
        },
        {
            "id": "check-taskfile",
            "name": "Validate Taskfile Config",
            "description": "Validate Taskfile config against the schema provided by Task",
            "entry": "check-jsonschema --builtin-schema vendor.taskfile",
            "language": "python",
            "files": "(?x)^(\n  Taskfile\\.(yml|yaml)|\n  taskfile\\.(yml|yaml)|\n  Taskfile\\.dist\\.(yml|yaml)|\n  taskfile\\.dist\\.(yml|yaml)\n)$\n",
            "types": [
                "yaml"
            ]
        },
        {
            "id": "check-travis",
            "name": "Validate Travis Config",
            "description": "Validate Travis Config against the schema provided by SchemaStore",
            "entry": "check-jsonschema --builtin-schema vendor.travis",
            "language": "python",
            "files": "^\\.travis\\.(yml|yaml)$",
            "types": [
                "yaml"
            ]
        },
        {
            "id": "check-woodpecker-ci",
            "name": "Validate Woodpecker Config",
            "description": "Validate Woodpecker Config against the schema provided by SchemaStore",
            "entry": "check-jsonschema --builtin-schema vendor.woodpecker-ci",
            "language": "python",
            "files": "(?x)^(\n  ^\\.woodpecker\\.(yml|yaml)$|\n  ^\\.woodpecker/.+\\.(yml|yaml)$\n)$\n",
            "types": [
                "yaml"
            ]
        }
    ],
    "https://github.com/sirosen/texthooks": [
        {
            "id": "fix-smartquotes",
            "name": "Fix smartquote characters",
            "description": "Replace \"smartquote\" characters with regular quotes",
            "entry": "fix-smartquotes",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "fix-ligatures",
            "name": "Fix ligature characters with NFKD normalization",
            "description": "Replace ligature characters with normalized individual characters",
            "entry": "fix-ligatures",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "fix-spaces",
            "name": "Normalize irregular space characters to \"space\"",
            "description": "Replace non-breaking spaces and other characters with the standard space character",
            "entry": "fix-spaces",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "forbid-bidi-controls",
            "name": "Forbid the use of unicode BiDi control characters",
            "description": "Check for lines of text which contain bidirectional text control characters",
            "entry": "forbid-bidi-controls",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "macro-expand",
            "name": "Expand text macros",
            "description": "Perform simple macro replacements in text files",
            "entry": "macro-expand",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "alphabetize-codeowners",
            "name": "Alphabetize Codeowners",
            "description": "Alphabetize GitHub CODEOWNERS files to list owners in the same order",
            "entry": "alphabetize-codeowners",
            "language": "python",
            "types": [
                "text"
            ],
            "files": "^(CODEOWNERS|docs/CODEOWNERS|\\.(github|gitlab|gitea)/CODEOWNERS)$"
        }
    ],
    "https://github.com/snok/pep585-upgrade": [
        {
            "id": "upgrade-type-hints",
            "name": "Upgrade type hints",
            "description": "Upgrades type hints to new types introduced in PEP 585",
            "entry": "upgrade-type-hints-script",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/jendrikseipp/vulture": [
        {
            "id": "vulture",
            "name": "vulture",
            "language": "python",
            "entry": "vulture",
            "description": "Find unused Python code.",
            "types": [
                "python"
            ],
            "pass_filenames": false,
            "require_serial": true
        }
    ],
    "https://github.com/mwouts/jupytext": [
        {
            "id": "jupytext",
            "name": "jupytext",
            "description": "Runs jupytext on all notebooks and paired files.",
            "language": "python",
            "entry": "jupytext --pre-commit-mode",
            "require_serial": true,
            "types_or": [
                "jupyter",
                "markdown",
                "python"
            ]
        }
    ],
    "https://github.com/ejba/pre-commit-maven": [
        {
            "id": "maven",
            "name": "maven",
            "description": "Runs arbitrary maven commands for java projects",
            "entry": "maven",
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "maven-test",
            "name": "maven test",
            "description": "Runs maven test build lifecycle",
            "entry": "maven-test",
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "maven-compile",
            "name": "maven compile",
            "description": "Runs maven compile build lifecycle",
            "entry": "maven-compile",
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "maven-checkstyle",
            "name": "maven checkstyle",
            "description": "Runs maven checkstyle build lifecycle",
            "entry": "maven-checkstyle",
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "maven-spotless-check",
            "name": "maven spotless check",
            "description": "Runs spotless:check goal",
            "entry": "maven-spotless-check",
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "maven-spotless-apply",
            "name": "maven spotless apply",
            "description": "Runs spotless:apply goal",
            "entry": "maven-spotless-apply",
            "language": "python",
            "pass_filenames": false
        }
    ],
    "https://github.com/tfsec/tfsec": [
        {
            "id": "tfsec",
            "name": "TFSec",
            "description": "TFsec is a tool to statically analyze Terraform templates to spot potential security issues.",
            "language": "golang",
            "entry": "tfsec",
            "pass_filenames": false
        },
        {
            "id": "tfsec-docker",
            "name": "TFSec Docker",
            "description": "TFsec is a tool to statically analyze Terraform templates to spot potential security issues, uses projects official docker image.",
            "language": "docker_image",
            "entry": "aquasec/tfsec-alpine",
            "pass_filenames": false
        },
        {
            "id": "tfsec-system",
            "name": "TFSec system",
            "description": "TFsec is a tool to statically analyze Terraform templates to spot potential security issues, uses systems installed tfsec.",
            "language": "system",
            "entry": "tfsec",
            "pass_filenames": false
        }
    ],
    "https://github.com/yoheimuta/protolint": [
        {
            "id": "protolint",
            "name": "Lint Protocol Buffer Files",
            "description": "Runs protolint to lint Protocol Buffer files",
            "language": "golang",
            "types": [
                "proto"
            ],
            "entry": "protolint lint"
        },
        {
            "id": "protolint-docker",
            "name": "Lint Protocol Buffer Files",
            "description": "Runs protolint Docker image to lint Protocol Buffer files",
            "language": "docker_image",
            "types": [
                "proto"
            ],
            "entry": "yoheimuta/protolint lint"
        }
    ],
    "https://github.com/hadolint/hadolint": [
        {
            "id": "hadolint-docker",
            "name": "Lint Dockerfiles",
            "description": "Runs hadolint Docker image to lint Dockerfiles",
            "language": "docker_image",
            "types": [
                "dockerfile"
            ],
            "entry": "ghcr.io/hadolint/hadolint hadolint"
        },
        {
            "id": "hadolint",
            "name": "Lint Dockerfiles",
            "description": "Runs hadolint to lint Dockerfiles",
            "language": "system",
            "types": [
                "dockerfile"
            ],
            "entry": "hadolint"
        }
    ],
    "https://github.com/google/go-jsonnet": [
        {
            "id": "jsonnet-format",
            "name": "jsonnetfmt",
            "description": "Automatically format jsonnet files.",
            "entry": "jsonnetfmt",
            "args": [
                "-i"
            ],
            "language": "golang",
            "files": "\\.(jsonnet|libsonnet)$",
            "minimum_pre_commit_version": "2.10.1"
        },
        {
            "id": "jsonnet-lint",
            "name": "jsonnet-lint",
            "description": "Lint jsonnet files.",
            "entry": "jsonnet-lint",
            "language": "golang",
            "files": "\\.(jsonnet|libsonnet)$",
            "minimum_pre_commit_version": "2.10.1"
        }
    ],
    "https://github.com/google/yamlfmt": [
        {
            "id": "yamlfmt",
            "name": "yamlfmt",
            "description": "This hook uses github.com/google/yamlfmt to format yaml files. Requires golang >1.18 to be installed.",
            "entry": "yamlfmt",
            "language": "golang",
            "types": [
                "yaml"
            ]
        }
    ],
    "https://github.com/guid-empty/flutter-dependency-validation-pre-commit": [
        {
            "id": "flutter-dependency-validation",
            "name": "Pubspec.yaml dependencies validation",
            "entry": "run",
            "language": "script",
            "files": "pubspec.yaml"
        }
    ],
    "https://github.com/cpplint/cpplint": [
        {
            "id": "cpplint",
            "name": "cpplint",
            "description": "Static code analysis of C/C++ files",
            "language": "python",
            "files": "\\.(h\\+\\+|h|hh|hxx|hpp|cuh|c|cc|cpp|cu|c\\+\\+|cxx|tpp|txx)$",
            "entry": "cpplint"
        }
    ],
    "https://github.com/MarcoGorelli/absolufy-imports": [
        {
            "id": "absolufy-imports",
            "name": "absolufy-imports",
            "description": "Automatically convert relative imports to absolute",
            "entry": "absolufy-imports",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        }
    ],
    "https://github.com/MarcoGorelli/auto-walrus": [
        {
            "id": "auto-walrus",
            "name": "auto-walrus",
            "description": "Automatically use the walrus operator!",
            "entry": "auto-walrus",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/MarcoGorelli/cython-lint": [
        {
            "id": "cython-lint",
            "name": "cython-lint",
            "description": "Lint Cython files",
            "entry": "cython-lint",
            "language": "python",
            "types": [
                "cython"
            ]
        },
        {
            "id": "double-quote-cython-strings",
            "name": "double-quote Cython strings",
            "description": "replaces single-quoted strings with double-quoted strings.",
            "entry": "double-quote-cython-strings",
            "language": "python",
            "types": [
                "cython"
            ]
        }
    ],
    "https://github.com/domdfcoding/flake2lint": [
        {
            "id": "flake2lint",
            "name": "Flake8 -> PyLint",
            "description": "Augment Flake8 noqa comments with PyLint comments.",
            "entry": "flake2lint",
            "language": "python",
            "types_or": [
                "python",
                "pyi"
            ]
        }
    ],
    "https://github.com/dotnet/format": [
        {
            "id": "dotnet-format",
            "name": "dotnet format",
            "language": "dotnet",
            "types_or": [
                "c#",
                "vb"
            ],
            "entry": "dotnet-format --include"
        }
    ],
    "https://github.com/ashwin153/pre-commit-vagrant": [
        {
            "id": "vagrant-validate",
            "name": "Validate Vagrantfile",
            "description": "Runs vagrant validate to validate Vagrantfiles",
            "language": "system",
            "files": "Vagrantfile",
            "entry": "vagrant validate"
        }
    ],
    "https://github.com/AleksaC/hadolint-py": [
        {
            "id": "hadolint",
            "name": "Hadolint",
            "description": "Lint Dockerfiles using hadolint without needing docker or system installation",
            "entry": "hadolint",
            "language": "python",
            "types": [
                "dockerfile"
            ]
        }
    ],
    "https://github.com/AleksaC/circleci-cli-py": [
        {
            "id": "circle-ci-validator",
            "name": "CircleCI Config Validation",
            "description": "Validate CircleCI config without having to install the cli globally",
            "entry": "env CIRCLECI_CLI_SKIP_UPDATE_CHECK=true circleci config validate -c",
            "language": "python",
            "files": "\\.circleci/config.yml"
        }
    ],
    "https://github.com/AleksaC/mirrors-cfn-nag": [
        {
            "id": "cfn-nag",
            "name": "cfn-nag",
            "description": "Wrapper around cfn_nag_scan that allows it to be ran on multiple files within a single hook",
            "entry": "cfn_nag_scan_wrapper",
            "language": "ruby",
            "files": "\\.(json|yaml|yml|template)$",
            "args": [
                "--fail-on-warnings",
                "--input-path"
            ],
            "require_serial": false
        }
    ],
    "https://github.com/cmake-lint/cmake-lint": [
        {
            "id": "cmakelint",
            "name": "CMake Lint",
            "description": "This hook lints CMake files for style issues.",
            "entry": "cmakelint",
            "language": "python",
            "types": [
                "cmake"
            ]
        }
    ],
    "https://github.com/priv-kweihmann/oelint-adv": [
        {
            "id": "oelint-adv",
            "name": "Advanced oelint",
            "description": "Based on the OpenEmbedded Styleguide and work done by oe-stylize-tool this module offers a (nearly) complete linter for bitbake-recipes.",
            "entry": "oelint-adv",
            "language": "python",
            "language_version": "python3",
            "files": ".*\\.(bb)|(bbappend)|(bbclass)$"
        }
    ],
    "https://github.com/jggomez/pre-commit-android-kotlin": [
        {
            "id": "ktlint",
            "name": "ktlint",
            "description": "Runs ktlint",
            "entry": "./gradlew ktlintFormat",
            "pass_filenames": false,
            "language": "system"
        },
        {
            "id": "unit_tests",
            "name": "unittests",
            "description": "Runs unit tests",
            "entry": "./gradlew test",
            "pass_filenames": false,
            "language": "system"
        },
        {
            "id": "build",
            "name": "build",
            "description": "Building App",
            "entry": "./gradlew assembleDebug",
            "pass_filenames": false,
            "language": "system"
        }
    ],
    "https://github.com/Carreau/velin": [
        {
            "id": "velin",
            "name": "Velin",
            "description": "This hook attempt to reformat docstrings using numpydoc format.",
            "entry": "velin",
            "language": "python",
            "language_version": "python3",
            "types": [
                "text"
            ],
            "types_or": [
                "python"
            ],
            "args": [
                "--write",
                "--no-fixers"
            ]
        }
    ],
    "https://github.com/chrismgrayftsinc/jsonnetfmt": [
        {
            "id": "jsonnetfmt",
            "name": "Format jsonnet files",
            "description": "This hook formats jsonnet files",
            "entry": "jsonnetfmt",
            "language": "golang",
            "files": "\\.(lib|j)sonnet$"
        }
    ],
    "https://github.com/zricethezav/gitleaks": [
        {
            "id": "gitleaks",
            "name": "Detect hardcoded secrets",
            "description": "Detect hardcoded secrets using Gitleaks",
            "entry": "gitleaks protect --verbose --redact --staged",
            "language": "golang",
            "pass_filenames": false
        },
        {
            "id": "gitleaks-docker",
            "name": "Detect hardcoded secrets",
            "description": "Detect hardcoded secrets using Gitleaks",
            "entry": "zricethezav/gitleaks protect --verbose --redact --staged",
            "language": "docker_image"
        },
        {
            "id": "gitleaks-system",
            "name": "Detect hardcoded secrets",
            "description": "Detect hardcoded secrets using Gitleaks",
            "entry": "gitleaks protect --verbose --redact --staged",
            "language": "system"
        }
    ],
    "https://github.com/hugoh/pre-commit-fish": [
        {
            "id": "fish_syntax",
            "name": "Fish syntax check",
            "description": "Check Fish shell syntax",
            "entry": "fish --no-execute",
            "language": "system",
            "types": [
                "fish"
            ]
        },
        {
            "id": "fish_indent",
            "name": "Fish indent check",
            "description": "Check Fish shell indentation",
            "entry": "pre-commit-hooks/fish_indent.fish",
            "language": "script",
            "types": [
                "fish"
            ]
        }
    ],
    "https://github.com/dfm/black_nbconvert": [
        {
            "id": "black_nbconvert",
            "name": "black_nbconvert",
            "description": "Apply black to ipynb files",
            "entry": "black_nbconvert",
            "language": "python",
            "language_version": "python3",
            "require_serial": true,
            "files": "\\.ipynb$"
        }
    ],
    "https://github.com/crate-ci/typos": [
        {
            "id": "typos",
            "name": "typos",
            "description": "Source code spell checker, binary install",
            "language": "python",
            "entry": "typos",
            "args": [
                "--write-changes",
                "--force-exclude"
            ],
            "types": [
                "text"
            ],
            "stages": [
                "commit",
                "merge-commit",
                "push",
                "manual"
            ]
        },
        {
            "id": "typos-docker",
            "name": "typos",
            "description": "Source code spell checker, Docker image",
            "language": "docker",
            "entry": "typos",
            "args": [
                "--write-changes",
                "--force-exclude"
            ],
            "types": [
                "text"
            ],
            "stages": [
                "commit",
                "merge-commit",
                "push",
                "manual"
            ]
        },
        {
            "id": "typos-src",
            "name": "typos",
            "description": "Source code spell checker, source install",
            "language": "rust",
            "entry": "typos",
            "args": [
                "--write-changes",
                "--force-exclude"
            ],
            "types": [
                "text"
            ],
            "stages": [
                "commit",
                "merge-commit",
                "push",
                "manual"
            ]
        }
    ],
    "https://github.com/snakemake/snakefmt": [
        {
            "id": "snakefmt",
            "name": "snakefmt",
            "description": "Snakefmt: The uncompromising Snakemake formatter",
            "entry": "snakefmt",
            "language": "python",
            "language_version": "python3",
            "require_serial": true,
            "files": "\\.smk$|Snakefile"
        }
    ],
    "https://github.com/regebro/pyroma": [
        {
            "id": "pyroma",
            "name": "Check package with Pyroma",
            "description": "Check how well a Python package conforms to best practices.",
            "entry": "pyroma",
            "args": [
                "-d",
                "--min=10",
                "."
            ],
            "language": "python",
            "pass_filenames": false,
            "always_run": true
        }
    ],
    "https://github.com/tox-dev/tox-ini-fmt": [
        {
            "id": "tox-ini-fmt",
            "name": "tox-ini-fmt",
            "description": "apply a consistent format to `tox.ini` files",
            "entry": "tox-ini-fmt",
            "language": "python",
            "language_version": "python3",
            "files": "(^|/)tox\\.ini$"
        }
    ],
    "https://github.com/janosh/format-ipy-cells": [
        {
            "id": "format-ipy-cells",
            "name": "Format iPython Cells",
            "description": "Format '# %%' cell delimiters in interactive Python notebooks. See https://code.visualstudio.com/docs/python/jupyter-support-py.",
            "entry": "format-ipy-cells",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/FalcoSuessgott/lint-gitlab-ci": [
        {
            "id": "gitlab-ci",
            "name": "Validate .gitlab-ci",
            "description": "lints .gitlab-ci.yml",
            "entry": "lint-gitlab-ci.sh",
            "language": "script",
            "files": ".gitlab-ci.yml"
        }
    ],
    "https://github.com/comkieffer/xml-linter-hook": [
        {
            "id": "xmllint",
            "name": "xmllint",
            "description": "Lint xml files with xmllint",
            "entry": "xmllint --noout",
            "language": "docker",
            "types": [
                "xml"
            ]
        }
    ],
    "https://github.com/jackdewinter/pymarkdown": [
        {
            "id": "pymarkdown",
            "name": "PyMarkdown",
            "description": "PyMarkdown - GitHub Flavored Markdown and CommonMark Compliant Linter",
            "language": "python",
            "language_version": "python3",
            "entry": "pymarkdown",
            "args": [
                "scan"
            ],
            "types": [
                "markdown"
            ]
        }
    ],
    "https://github.com/klieret/jekyll-relative-url-check": [
        {
            "id": "jekyll-relative-url-check-html",
            "name": "Jekyll Relative URL HTML",
            "entry": "jekyll-relative-url-check-html",
            "types": [
                "html"
            ],
            "language": "python"
        },
        {
            "id": "jekyll-relative-url-check-markdown",
            "name": "Jekyll Relative URL Markdown",
            "entry": "jekyll-relative-url-check-markdown",
            "types": [
                "markdown"
            ],
            "language": "python"
        }
    ],
    "https://github.com/tarioch/flux-check-hook": [
        {
            "id": "check-flux-helm-values",
            "name": "Check flux helm values",
            "description": "Verify that values used by flux HelmReleases are ok.",
            "entry": "check-flux-helm-values",
            "language": "python",
            "files": "^[^.].*\\.yaml$"
        }
    ],
    "https://github.com/streetsidesoftware/cspell-cli": [
        {
            "id": "cspell",
            "name": "cspell",
            "description": "This hook runs CSpell spellchecker",
            "entry": "cspell-cli",
            "language": "node",
            "types": [
                "text"
            ],
            "args": [
                "--no-must-find-files",
                "--no-progress",
                "--no-summary",
                "--gitignore"
            ]
        }
    ],
    "https://github.com/rapidsai/frigate": [
        {
            "id": "frigate",
            "name": "frigate",
            "entry": "frigate hook",
            "description": "Run frigate to generate documentation for your Helm charts.",
            "language": "conda",
            "pass_filenames": false,
            "always_run": true
        }
    ],
    "https://github.com/norwoodj/helm-docs": [
        {
            "id": "helm-docs",
            "args": [],
            "description": "Uses 'helm-docs' to create documentation from the Helm chart's 'values.yaml' file, and inserts the result into a corresponding 'README.md' file.",
            "entry": "git-hook/helm-docs",
            "files": "(README\\.md\\.gotmpl|(Chart|requirements|values)\\.yaml)$",
            "language": "script",
            "name": "Helm Docs",
            "require_serial": true
        },
        {
            "id": "helm-docs-built",
            "args": [],
            "description": "Uses auto built 'helm-docs' to create documentation from the Helm chart's 'values.yaml' file, and inserts the result into a corresponding 'README.md' file.",
            "entry": "helm-docs",
            "files": "(README\\.md\\.gotmpl|(Chart|requirements|values)\\.yaml)$",
            "language": "golang",
            "name": "Helm Docs Built",
            "require_serial": true
        },
        {
            "id": "helm-docs-container",
            "args": [],
            "description": "Uses the container image of 'helm-docs' to create documentation from the Helm chart's 'values.yaml' file, and inserts the result into a corresponding 'README.md' file.",
            "entry": "jnorwood/helm-docs:latest",
            "files": "(README\\.md\\.gotmpl|(Chart|requirements|values)\\.yaml)$",
            "language": "docker_image",
            "name": "Helm Docs Container",
            "require_serial": true
        }
    ],
    "https://github.com/sqlfluff/sqlfluff": [
        {
            "id": "sqlfluff-lint",
            "name": "sqlfluff-lint",
            "entry": "sqlfluff lint --processes 0",
            "language": "python",
            "description": "Lints sql files with `SQLFluff`",
            "types": [
                "sql"
            ],
            "require_serial": true,
            "additional_dependencies": []
        },
        {
            "id": "sqlfluff-fix",
            "name": "sqlfluff-fix",
            "entry": "sqlfluff fix --show-lint-violations --processes 0",
            "language": "python",
            "description": "Fixes sql lint errors with `SQLFluff`",
            "types": [
                "sql"
            ],
            "require_serial": true,
            "additional_dependencies": []
        }
    ],
    "https://github.com/adamchainz/blacken-docs": [
        {
            "id": "blacken-docs",
            "name": "blacken-docs",
            "description": "Run `black` on python code blocks in documentation files",
            "entry": "blacken-docs",
            "language": "python",
            "files": "\\.(rst|md|markdown|py|tex)$"
        }
    ],
    "https://github.com/adamchainz/django-upgrade": [
        {
            "id": "django-upgrade",
            "name": "django-upgrade",
            "description": "Automatically upgrade your Django project code.",
            "entry": "django-upgrade",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        }
    ],
    "https://github.com/scop/pre-commit-shfmt": [
        {
            "id": "shfmt",
            "name": "shfmt",
            "description": "Shell source code formatter (prebuilt upstream executable)",
            "language": "python",
            "entry": "shfmt",
            "args": [
                "-w",
                "-s"
            ],
            "types": [
                "shell"
            ],
            "exclude_types": [
                "csh",
                "tcsh",
                "zsh"
            ],
            "stages": [
                "commit",
                "merge-commit",
                "push",
                "manual"
            ]
        },
        {
            "id": "shfmt-src",
            "name": "shfmt",
            "description": "Shell source code formatter (build from source)",
            "language": "golang",
            "additional_dependencies": [
                "mvdan.cc/sh/v3/cmd/shfmt@v3.8.0"
            ],
            "entry": "shfmt",
            "args": [
                "-w",
                "-s"
            ],
            "types": [
                "shell"
            ],
            "exclude_types": [
                "csh",
                "tcsh",
                "zsh"
            ],
            "stages": [
                "commit",
                "merge-commit",
                "push",
                "manual"
            ]
        },
        {
            "id": "shfmt-docker",
            "name": "shfmt",
            "description": "Shell source code formatter (Docker image)",
            "language": "docker_image",
            "entry": "--net none mvdan/shfmt:v3.8.0@sha256:7443e0094a8af5f764f0e8619a64c3b6169d716da68c175fb08ba28a99235c8a",
            "args": [
                "-w",
                "-s"
            ],
            "types": [
                "shell"
            ],
            "exclude_types": [
                "csh",
                "tcsh",
                "zsh"
            ],
            "stages": [
                "commit",
                "merge-commit",
                "push",
                "manual"
            ]
        }
    ],
    "https://github.com/scop/pre-commit-perlcritic": [
        {
            "id": "perlcritic",
            "name": "perlcritic",
            "description": "Perl source code critic (native install)",
            "language": "perl",
            "additional_dependencies": [
                "PETDANCE/Perl-Critic-1.152.tar.gz"
            ],
            "entry": "perlcritic",
            "args": [
                "--quiet"
            ],
            "types": [
                "perl"
            ],
            "stages": [
                "commit",
                "merge-commit",
                "push",
                "manual"
            ]
        }
    ],
    "https://github.com/BlankSpruce/gersemi": [
        {
            "id": "gersemi",
            "name": "gersemi",
            "description": "Gersemi - A formatter to make your CMake code the real treasure.",
            "entry": "gersemi",
            "args": [
                "-i"
            ],
            "require_serial": true,
            "language": "python",
            "types": [
                "cmake"
            ]
        }
    ],
    "https://github.com/realm/SwiftLint": [
        {
            "id": "swiftlint",
            "name": "SwiftLint",
            "description": "Check Swift files for issues with SwiftLint",
            "entry": "swiftlint --quiet",
            "language": "swift",
            "types": [
                "swift"
            ]
        }
    ],
    "https://gitlab.com/bmares/check-json5": [
        {
            "id": "check-json5",
            "name": "check json5",
            "description": "checks json files for syntax parsable as json5 (with comments).",
            "entry": "check-json5",
            "language": "python",
            "types": [
                "json"
            ]
        }
    ],
    "https://github.com/semaphor-dk/dansabel": [
        {
            "id": "dansabel",
            "name": "dansabel",
            "description": "Checks and lints Ansible projects (YAML/Jinja2 only)",
            "entry": "jinjalint.py",
            "language": "python",
            "types": [
                "file"
            ],
            "files": "(\\.yml|\\.j2)$|/templates/.*"
        }
    ],
    "https://github.com/gitguardian/gg-shield": [
        {
            "id": "ggshield",
            "name": "ggshield (pre-commit)",
            "entry": "ggshield",
            "description": "Runs ggshield to detect hardcoded secrets, security vulnerabilities and policy breaks.",
            "stages": [
                "commit"
            ],
            "args": [
                "secret",
                "scan",
                "pre-commit"
            ],
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "ggshield-iac",
            "name": "ggshield-iac (pre-commit)",
            "entry": "ggshield",
            "description": "Runs ggshield Infra as Code Security to detect IaC vulnerabilities and policy breaks.",
            "stages": [
                "commit"
            ],
            "args": [
                "iac",
                "scan",
                "pre-commit"
            ],
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "ggshield-sca",
            "name": "ggshield-sca (pre-commit)",
            "entry": "ggshield",
            "description": "Runs ggshield Software Composition Analysis to detect vulnerabilities introduced by dependencies.",
            "stages": [
                "commit"
            ],
            "args": [
                "sca",
                "scan",
                "pre-commit"
            ],
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "docker-ggshield",
            "name": "ggshield (pre-commit,docker)",
            "language": "docker_image",
            "entry": "-e GITGUARDIAN_API_KEY gitguardian/ggshield:latest ggshield secret scan pre-commit",
            "description": "Runs ggshield to detect hardcoded secrets, security vulnerabilities and policy breaks in docker images.",
            "pass_filenames": false
        },
        {
            "id": "ggshield-push",
            "name": "ggshield (pre-push)",
            "entry": "ggshield",
            "description": "Runs ggshield to detect hardcoded secrets, security vulnerabilities and policy breaks.",
            "args": [
                "secret",
                "scan",
                "pre-push"
            ],
            "stages": [
                "push"
            ],
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "ggshield-iac-push",
            "name": "ggshield-iac (pre-push)",
            "entry": "ggshield",
            "description": "Runs ggshield Infra as Code Security to detect IaC vulnerabilities and policy breaks.",
            "args": [
                "iac",
                "scan",
                "pre-push"
            ],
            "stages": [
                "push"
            ],
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "ggshield-sca-push",
            "name": "ggshield-sca (pre-push)",
            "entry": "ggshield",
            "description": "Runs ggshield Software Composition Analysis to detect vulnerabilities introduced by dependencies.",
            "args": [
                "sca",
                "scan",
                "pre-push"
            ],
            "stages": [
                "push"
            ],
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "docker-ggshield-push",
            "name": "ggshield (pre-push,docker)",
            "language": "docker_image",
            "entry": "-e GITGUARDIAN_API_KEY gitguardian/ggshield:latest ggshield secret scan pre-push",
            "description": "Runs ggshield to detect hardcoded secrets, security vulnerabilities and policy breaks in docker images.",
            "pass_filenames": false
        }
    ],
    "https://github.com/JohnnyMorganz/StyLua": [
        {
            "id": "stylua",
            "name": "StyLua (cargo)",
            "description": "An opinionated Lua code formatter",
            "entry": "stylua",
            "language": "rust",
            "types": [
                "lua"
            ]
        },
        {
            "id": "stylua-system",
            "name": "StyLua (system)",
            "description": "An opinionated Lua code formatter",
            "entry": "stylua",
            "language": "system",
            "types": [
                "lua"
            ]
        },
        {
            "id": "stylua-github",
            "name": "StyLua (Github)",
            "description": "An opinionated Lua code formatter. Downloads Github release",
            "entry": "stylua",
            "language": "python",
            "types": [
                "lua"
            ]
        }
    ],
    "https://github.com/shssoichiro/oxipng": [
        {
            "id": "oxipng",
            "name": "oxipng",
            "description": "Multithreaded PNG optimizer written in Rust.",
            "entry": "oxipng",
            "language": "rust",
            "types": [
                "png"
            ],
            "require_serial": true
        }
    ],
    "https://github.com/datarootsio/databooks": [
        {
            "id": "databooks-meta",
            "name": "databooks-meta",
            "description": "Remove Jupyter notebook metadata using `databooks`.",
            "entry": "databooks meta --yes",
            "language": "python",
            "minimum_pre_commit_version": "2.9.2",
            "types": [
                "jupyter"
            ]
        },
        {
            "id": "databooks-assert",
            "name": "databooks-assert",
            "description": "Assert Jupyter notebook metadata values using `databooks`.",
            "entry": "databooks assert --expr \"True\"",
            "language": "python",
            "minimum_pre_commit_version": "2.9.2",
            "types": [
                "jupyter"
            ]
        }
    ],
    "https://github.com/standard/standard": [
        {
            "id": "standard",
            "name": "standard",
            "entry": "standard --fix",
            "language": "node",
            "files": "\\.(js|jsx|mjs|cjs)$"
        }
    ],
    "https://github.com/Sceptre/sceptrelint": [
        {
            "id": "check-file-names",
            "name": "check file names",
            "entry": "check-file-names",
            "language": "python",
            "files": "^config/.*(.yaml|.yml|.json)$",
            "exclude": "^config/.*config(.yaml|.yml|.json)$"
        },
        {
            "id": "check-stack-tags",
            "name": "check stack tags",
            "entry": "check-stack-tags",
            "language": "python",
            "files": "^config/.*(.yaml|.yml|.json)$",
            "exclude": "^config/.*config(.yaml|.yml|.json)$"
        },
        {
            "id": "check-stack-names",
            "name": "check stack names",
            "entry": "check-stack-names",
            "language": "python",
            "files": "^config/.*(.yaml|.yml|.json)$",
            "exclude": "^config/.*config(.yaml|.yml|.json)$"
        },
        {
            "id": "check-stack-tag-values",
            "name": "check stack tag values",
            "entry": "check-stack-tag-values",
            "language": "python",
            "files": "^config/.*(.yaml|.yml|.json)$",
            "exclude": "^config/.*config(.yaml|.yml|.json)$"
        }
    ],
    "https://github.com/lyz-code/yamlfix": [
        {
            "id": "yamlfix",
            "name": "yamlfix",
            "entry": "yamlfix",
            "language": "python",
            "language_version": "python3",
            "types": [
                "yaml"
            ]
        }
    ],
    "https://github.com/dannysepler/rm_unneeded_f_str": [
        {
            "id": "rm-unneeded-f-str",
            "name": "Remove unneeded f-strings",
            "description": "Find and replace unneeded f-strings in your code.",
            "entry": "rm-unneeded-f-str",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/cmhughes/latexindent.pl": [
        {
            "id": "latexindent",
            "name": "latexindent.pl",
            "description": "Run latexindent.pl (get dependencies using CPAN)",
            "minimum_pre_commit_version": "2.1.0",
            "entry": "latexindent.pl",
            "args": [
                "--overwriteIfDifferent",
                "--silent",
                "--local"
            ],
            "language": "perl",
            "types": [
                "tex"
            ]
        },
        {
            "id": "latexindent-conda",
            "name": "latexindent.pl",
            "description": "Run latexindent.pl (get dependencies using Conda)",
            "minimum_pre_commit_version": "2.1.0",
            "entry": "latexindent.pl",
            "args": [
                "--overwriteIfDifferent",
                "--silent",
                "--local"
            ],
            "language": "conda",
            "types": [
                "tex"
            ]
        },
        {
            "id": "latexindent-docker",
            "name": "latexindent.pl",
            "description": "Run latexindent.pl (get dependencies using Docker)",
            "minimum_pre_commit_version": "2.1.0",
            "entry": "ghcr.io/cmhughes/latexindent.pl",
            "language": "docker_image",
            "types": [
                "tex"
            ],
            "args": [
                "--overwriteIfDifferent",
                "--silent",
                "--local"
            ]
        }
    ],
    "https://github.com/sirwart/ripsecrets": [
        {
            "id": "ripsecrets",
            "name": "ripsecrets",
            "description": "Prevent committing secret keys into your source code",
            "entry": "ripsecrets",
            "language": "rust",
            "types": [
                "text"
            ],
            "args": [
                "--strict-ignore"
            ],
            "require_serial": true,
            "minimum_pre_commit_version": "0"
        },
        {
            "id": "ripsecrets-system",
            "name": "ripsecrets",
            "description": "Prevent committing secret keys into your source code",
            "entry": "ripsecrets",
            "language": "system",
            "types": [
                "text"
            ],
            "args": [
                "--strict-ignore"
            ],
            "require_serial": true,
            "minimum_pre_commit_version": "0"
        }
    ],
    "https://github.com/bagerard/graphviz-dot-hooks": [
        {
            "id": "check-dot",
            "name": "check dot",
            "description": "checks dot files for parseable syntax.",
            "entry": "check-dot",
            "language": "python",
            "files": ".dot$",
            "pass_filenames": true
        },
        {
            "id": "render-dot",
            "name": "render dot",
            "description": "render all .dot to .dot.png",
            "entry": "render-dot",
            "language": "python",
            "files": ".dot$",
            "pass_filenames": true
        }
    ],
    "https://github.com/omnilib/ufmt": [
        {
            "id": "ufmt",
            "name": "Format files with \u00b5fmt",
            "description": "Safe, atomic formatting with black and \u00b5sort",
            "language": "python",
            "types_or": [
                "python",
                "pyi"
            ],
            "entry": "ufmt format",
            "require_serial": true
        }
    ],
    "https://github.com/daveshanley/vacuum": [
        {
            "id": "vacuum",
            "name": "vacuum",
            "description": "OpenAPI linter and quality checker (native install)",
            "language": "golang",
            "entry": "vacuum lint",
            "args": [
                "--details"
            ],
            "types": [
                "text"
            ],
            "files": "(^|/)(openapi|swagger)\\.(json|ya?ml)$"
        }
    ],
    "https://github.com/nuztalgia/botstrap": [
        {
            "id": "detect-discord-bot-tokens",
            "name": "detect discord bot tokens",
            "description": "Prevents unencrypted/plaintext Discord bot tokens from being committed.",
            "language": "pygrep",
            "entry": "(?a)[\\w-]{24,}\\.[\\w-]{6}\\.[\\w-]{27,}"
        },
        {
            "id": "detect-encrypted-tokens",
            "name": "detect encrypted tokens",
            "description": "Prevents files containing Botstrap-encrypted tokens from being committed.",
            "language": "fail",
            "entry": "*.key files contain encrypted token data and should be gitignored.",
            "files": ".*\\.(?:content|fernet)\\.key$"
        }
    ],
    "https://gitlab.com/adam-moss/pre-commit-trailer": [
        {
            "id": "add-pre-commit-config-trailer",
            "stages": [
                "commit-msg"
            ],
            "language": "script",
            "name": "add pre-commit-config trailer",
            "description": "add a commit message trailer indicating pre-commit has been used",
            "entry": "src/pre_commit_trailer/add-pre-commit-config-trailer.sh"
        },
        {
            "id": "add-pre-commit-user-skipped-trailer",
            "stages": [
                "commit-msg"
            ],
            "language": "script",
            "name": "add pre-commit-user-skipped trailer",
            "description": "add a commit message trailer indicating pre-commit hooks skipped",
            "entry": "src/pre_commit_trailer/add-pre-commit-user-skipped-trailer.sh"
        }
    ],
    "https://gitlab.com/adam-moss/pre-commit-ssh-git-signing-key": [
        {
            "id": "add-ssh-git-signing-key",
            "stages": [
                "commit-msg"
            ],
            "language": "script",
            "name": "add ssh git signing key",
            "description": "add the configured git signing key to the ssh-agent if it isn't already present",
            "entry": "src/pre_commit_ssh_git_signing_key/add-ssh-git-signing-key.sh",
            "pass_filenames": false
        },
        {
            "id": "remove-ssh-git-signing-key",
            "stages": [
                "post-commit"
            ],
            "language": "script",
            "name": "remove ssh git signing key",
            "description": "remove the configured git signing key from the ssh-agent if it is still present",
            "entry": "src/pre_commit_ssh_git_signing_key/remove-ssh-git-signing-key.sh",
            "always_run": true,
            "pass_filenames": false
        }
    ],
    "https://github.com/astral-sh/ruff-pre-commit": [
        {
            "id": "ruff",
            "name": "ruff",
            "description": "Run 'ruff' for extremely fast Python linting",
            "entry": "ruff check --force-exclude",
            "language": "python",
            "types_or": [
                "python",
                "pyi"
            ],
            "args": [],
            "require_serial": true,
            "additional_dependencies": [],
            "minimum_pre_commit_version": "2.9.2"
        },
        {
            "id": "ruff-format",
            "name": "ruff-format",
            "description": "Run 'ruff format' for extremely fast Python formatting",
            "entry": "ruff format --force-exclude",
            "language": "python",
            "types_or": [
                "python",
                "pyi"
            ],
            "args": [],
            "require_serial": true,
            "additional_dependencies": [],
            "minimum_pre_commit_version": "2.9.2"
        }
    ],
    "https://github.com/mrtazz/checkmake": [
        {
            "id": "checkmake",
            "name": "Makefile linter/analyzer",
            "entry": "checkmake",
            "language": "golang",
            "pass_filenames": true,
            "types": [
                "makefile"
            ]
        },
        {
            "id": "checkmake-system",
            "name": "Makefile linter/analyzer",
            "entry": "checkmake",
            "language": "system",
            "types": [
                "makefile"
            ],
            "pass_filenames": true
        }
    ],
    "https://github.com/jshwi/docsig": [
        {
            "id": "docsig",
            "name": "docsig",
            "entry": "docsig",
            "description": "check signature params for proper documentation",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/finsberg/clang-format-docs": [
        {
            "id": "clang-format-docs",
            "name": "clang-format-docs",
            "description": "Run `clang-format` on C++ code blocks in documentation files.",
            "entry": "clang-format-docs",
            "language": "python",
            "language_version": "python3",
            "types": [
                "markdown"
            ]
        }
    ],
    "https://github.com/rubocop/rubocop": [
        {
            "id": "rubocop",
            "name": "rubocop",
            "description": "Enforce the community Ruby Style Guide with RuboCop",
            "entry": "rubocop",
            "language": "ruby",
            "types": [
                "ruby"
            ],
            "args": [
                "--autocorrect",
                "--force-exclusion"
            ]
        }
    ],
    "https://github.com/dbt-checkpoint/dbt-checkpoint": [
        {
            "id": "check-column-desc-are-same",
            "name": "Check column descriptions are same",
            "description": "Check the models have same descriptions for same column names.",
            "entry": "check-column-desc-are-same",
            "language": "python",
            "files": ".*\\.(yml|yaml)$"
        },
        {
            "id": "check-column-name-contract",
            "name": "Check column name contract",
            "description": "Check column name abides to contract.",
            "entry": "check-column-name-contract",
            "language": "python",
            "types_or": [
                "sql",
                "yaml"
            ]
        },
        {
            "id": "check-macro-has-description",
            "name": "Check the macro has description",
            "description": "Ensures that the macro has description in properties file.",
            "entry": "check-macro-has-description",
            "language": "python",
            "types_or": [
                "yaml",
                "sql"
            ],
            "require_serial": true
        },
        {
            "id": "check-macro-arguments-have-desc",
            "name": "Check the macro arguments have description",
            "description": "Ensures that the macro has arguments with descriptions in properties file.",
            "entry": "check-macro-arguments-have-desc",
            "language": "python",
            "types_or": [
                "yaml",
                "sql"
            ],
            "require_serial": true
        },
        {
            "id": "check-model-columns-have-desc",
            "name": "Check the model columns have description",
            "description": "Ensures that the model has columns with descriptions in properties file.",
            "entry": "check-model-columns-have-desc",
            "language": "python",
            "types_or": [
                "yaml",
                "sql"
            ],
            "require_serial": true
        },
        {
            "id": "check-model-has-all-columns",
            "name": "Check the model has all columns in properties file",
            "description": "Ensures that all columns in database are specified in properties file.",
            "entry": "check-model-has-all-columns",
            "language": "python",
            "types_or": [
                "sql",
                "yaml"
            ]
        },
        {
            "id": "check-model-has-contract",
            "name": "Check model has contract",
            "description": "Check model has contract enforced = True",
            "entry": "check-model-has-contract",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-model-has-constraints",
            "name": "Check model has constraints",
            "description": "Check model has constraints for specific columns",
            "entry": "check-model-has-constraints",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-model-has-description",
            "name": "Check the model has description",
            "description": "Ensures that the model has description in properties file.",
            "entry": "check-model-has-description",
            "language": "python",
            "types_or": [
                "yaml",
                "sql"
            ],
            "require_serial": true
        },
        {
            "id": "check-model-has-meta-keys",
            "name": "Check the model has keys in the meta part",
            "description": "Ensures that the model has a list of valid meta keys.",
            "entry": "check-model-has-meta-keys",
            "language": "python",
            "types_or": [
                "yaml",
                "sql"
            ],
            "require_serial": true
        },
        {
            "id": "check-model-has-labels-keys",
            "name": "Check the model has keys in the labels part",
            "description": "Ensures that the model has a list of valid labels keys.",
            "entry": "check-model-has-labels-keys",
            "language": "python",
            "types_or": [
                "yaml",
                "sql"
            ],
            "require_serial": true
        },
        {
            "id": "check-model-has-properties-file",
            "name": "Check the model has properties file",
            "description": "Ensures that the model has properties file (schema file).",
            "entry": "check-model-has-properties-file",
            "language": "python",
            "types_or": [
                "sql",
                "yaml"
            ]
        },
        {
            "id": "check-model-has-tests-by-group",
            "name": "Check model; number of tests from group of tests.",
            "description": "Ensures that the model has a number of tests from a group of tests.",
            "entry": "check-model-has-tests-by-group",
            "language": "python",
            "types_or": [
                "sql",
                "yaml"
            ]
        },
        {
            "id": "check-model-has-tests-by-name",
            "name": "Check the model tests by a test name",
            "description": "Ensures that the model has a number of tests of a certain name (e.g. data, unique).",
            "entry": "check-model-has-tests-by-name",
            "language": "python",
            "types_or": [
                "sql",
                "yaml"
            ]
        },
        {
            "id": "check-model-has-tests-by-type",
            "name": "Check the model tests by a test type",
            "description": "Ensures that the model has a number of tests of a certain type (data, schema).",
            "entry": "check-model-has-tests-by-type",
            "language": "python",
            "types_or": [
                "sql",
                "yaml"
            ]
        },
        {
            "id": "check-model-has-tests",
            "name": "Check that model has tests",
            "description": "Ensures that the model has a number of tests.",
            "entry": "check-model-has-tests",
            "language": "python",
            "types_or": [
                "sql",
                "yaml"
            ]
        },
        {
            "id": "check-model-name-contract",
            "name": "Check model name contract",
            "description": "Check model name abides to contract.",
            "entry": "check-model-name-contract",
            "language": "python",
            "types_or": [
                "sql"
            ]
        },
        {
            "id": "check-model-parents-schema",
            "name": "Check parent models/sources from certain schema",
            "entry": "check-model-parents-schema",
            "language": "python",
            "types_or": [
                "yaml",
                "sql"
            ]
        },
        {
            "id": "check-model-parents-database",
            "name": "Check parent models/sources from certain database",
            "entry": "check-model-parents-database",
            "language": "python",
            "types_or": [
                "sql",
                "yaml"
            ]
        },
        {
            "id": "check-model-parents-and-childs",
            "name": "Check the model has a parents/childs",
            "description": "Ensures the model has a specific number (max/min) of parents or/and childs.",
            "entry": "check-model-parents-and-childs",
            "language": "python",
            "types_or": [
                "sql",
                "yaml"
            ]
        },
        {
            "id": "check-model-tags",
            "name": "Check the model has valid tags",
            "description": "Ensures that the model has only valid tags from the provided list.",
            "entry": "check-model-tags",
            "language": "python",
            "types_or": [
                "sql",
                "yaml"
            ]
        },
        {
            "id": "check-script-has-no-table-name",
            "name": "Check the script has not table name",
            "description": "Ensures that the script is using only source or ref macro to specify the table name.",
            "entry": "check-script-has-no-table-name",
            "language": "python",
            "types_or": [
                "sql"
            ]
        },
        {
            "id": "check-script-ref-and-source",
            "name": "Check the script has existing refs and sources",
            "description": "Ensures that the script contains only existing sources or macros.",
            "entry": "check-script-ref-and-source",
            "language": "python",
            "types_or": [
                "sql"
            ]
        },
        {
            "id": "check-script-semicolon",
            "name": "Check the script does not contain a semicolon",
            "description": "Ensure that the script does not have a semicolon at the end of the file.",
            "entry": "check-script-semicolon",
            "language": "python",
            "types_or": [
                "sql"
            ]
        },
        {
            "id": "check-source-childs",
            "name": "Check the source has max/min number of childs.",
            "description": "Ensures the source has a specific number (max/min) of childs.",
            "entry": "check-source-childs",
            "language": "python",
            "types_or": [
                "sql"
            ]
        },
        {
            "id": "check-source-columns-have-desc",
            "name": "Check for source column descriptions",
            "description": "Ensures that the source has columns with descriptions in the properties file.",
            "entry": "check-source-columns-have-desc",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-source-has-all-columns",
            "name": "Check source has all columns in properties file",
            "description": "Ensures that all columns in the database are specified in the properties file.",
            "entry": "check-source-has-all-columns",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-source-table-has-description",
            "name": "Check the source table has description",
            "description": "Ensures that the source table has description in properties file.",
            "entry": "check-source-table-has-description",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-source-has-freshness",
            "name": "Check the source has the freshness",
            "description": "Ensures that the source has freshness options.",
            "entry": "check-source-has-freshness",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-source-has-loader",
            "name": "Check the source has loader option",
            "description": "Ensures that the source has loader option.",
            "entry": "check-source-has-loader",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-source-has-meta-keys",
            "name": "Check the source has keys in the meta part",
            "description": "Ensures that the source has a list of valid meta keys.",
            "entry": "check-source-has-meta-keys",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-source-has-labels-keys",
            "name": "Check the source has keys in the labels part",
            "description": "Ensures that the source has a list of valid labels keys.",
            "entry": "check-source-has-labels-keys",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-source-has-tests-by-name",
            "name": "Check the source tests by test name",
            "description": "Ensures that the source has a number of tests of a certain name (e.g. data, unique).",
            "entry": "check-source-has-tests-by-name",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-source-has-tests-by-type",
            "name": "Check the source tests by test type",
            "description": "Ensures that the source has a number of tests of a certain type (data, schema).",
            "entry": "check-source-has-tests-by-type",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-source-has-tests-by-group",
            "name": "Check the source tests by test group",
            "description": "Ensures that the source has a number of tests of a certain group (unique, unique-combination-of-columns).",
            "entry": "check-source-has-tests-by-group",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-source-has-tests",
            "name": "Check the source has tests",
            "description": "Ensures that the source has a number of tests.",
            "entry": "check-source-has-tests",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-source-tags",
            "name": "Check the source has valid tags",
            "description": "Ensures that the source has only valid tags from the provided list.",
            "entry": "check-source-tags",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "dbt-clean",
            "name": "dbt clean",
            "description": "Deletes all folders specified in the clean-targets.",
            "entry": "dbt-clean",
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "dbt-compile",
            "name": "dbt compile",
            "description": "Generates executable SQL from source model, test, and analysis files.",
            "entry": "dbt-compile",
            "language": "python",
            "types_or": [
                "sql"
            ],
            "require_serial": true
        },
        {
            "id": "dbt-deps",
            "name": "dbt deps",
            "description": "Pulls the most recent version of the dependencies listed in your packages.yml.",
            "entry": "dbt-deps",
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "dbt-docs-generate",
            "name": "dbt docs generate",
            "description": "The command is responsible for generating your project's documentation website.",
            "entry": "dbt-docs-generate",
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "dbt-parse",
            "name": "dbt parse",
            "description": "Generates manifest.json from source model, test, and analysis files.",
            "entry": "dbt-parse",
            "language": "python",
            "types_or": [
                "yaml",
                "sql"
            ],
            "pass_filenames": false
        },
        {
            "id": "dbt-run",
            "name": "dbt run",
            "description": "Executes compiled sql model files.",
            "entry": "dbt-run",
            "language": "python",
            "require_serial": true,
            "types_or": [
                "sql"
            ]
        },
        {
            "id": "dbt-test",
            "name": "dbt test",
            "description": "Runs tests on data in deployed models.",
            "entry": "dbt-test",
            "language": "python",
            "require_serial": true,
            "types_or": [
                "sql"
            ]
        },
        {
            "id": "generate-missing-sources",
            "name": "Generate missing sources",
            "description": "If any source is missing this hook tries to create it.",
            "entry": "generate-missing-sources",
            "language": "python",
            "types_or": [
                "sql"
            ]
        },
        {
            "id": "generate-model-properties-file",
            "name": "Generate model properties file",
            "description": "Generate model properties file if does not exists.",
            "entry": "generate-model-properties-file",
            "language": "python",
            "types_or": [
                "sql"
            ],
            "args": [
                "--properties-file",
                "/Users/tomsejr/Documents/03-Workspace/Private/jaffle_shop/{database}/{schema}/{name}.yml"
            ],
            "require_serial": true
        },
        {
            "id": "unify-column-description",
            "name": "Unify column description",
            "description": "Unify column descriptions across all models",
            "entry": "unify-column-description",
            "language": "python",
            "files": ".*\\.(yml|yaml)$",
            "require_serial": true
        },
        {
            "id": "replace-script-table-names",
            "name": "Replace script table names",
            "description": "Replace table names with source or ref macros in the script.",
            "entry": "replace-script-table-names",
            "language": "python",
            "types_or": [
                "sql"
            ]
        },
        {
            "id": "remove-script-semicolon",
            "name": "Remove script semicolon",
            "description": "Remove semicolon at the end of the script.",
            "entry": "remove-script-semicolon",
            "language": "python",
            "types_or": [
                "sql"
            ]
        },
        {
            "id": "check-model-materialization-by-childs",
            "name": "Check the materialization of the model by childs",
            "description": "Controls the materialization of the model by its number of childs.",
            "entry": "check-model-materialization-by-childs",
            "language": "python",
            "types_or": [
                "sql"
            ]
        },
        {
            "id": "check-exposure-has-meta-keys",
            "name": "Check the exposure has keys in the meta part",
            "description": "Ensures that the exposure has a list of valid meta keys.",
            "entry": "check-exposure-has-meta-keys",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-macro-has-meta-keys",
            "name": "Check the macro has keys in the meta part",
            "description": "Ensures that the macro has a list of valid meta keys.",
            "entry": "check-macro-has-meta-keys",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-seed-has-meta-keys",
            "name": "Check the seed has keys in the meta part",
            "description": "Ensures that the seed has a list of valid meta keys.",
            "entry": "check-seed-has-meta-keys",
            "language": "python",
            "types_or": [
                "yaml"
            ]
        },
        {
            "id": "check-snapshot-has-meta-keys",
            "name": "Check the snapshot has keys in the meta part",
            "description": "Ensures that the snapshot has a list of valid meta keys.",
            "entry": "check-snapshot-has-meta-keys",
            "language": "python",
            "types_or": [
                "sql",
                "yaml"
            ]
        },
        {
            "id": "check-test-has-meta-keys",
            "name": "Check the test has keys in the meta part",
            "description": "Ensures that the test has a list of valid meta keys.",
            "entry": "check-test-has-meta-keys",
            "language": "python",
            "types_or": [
                "sql"
            ]
        }
    ],
    "https://gitlab.com/engmark/vcard": [
        {
            "id": "vcard",
            "name": "vcard",
            "description": "vCard validator",
            "entry": "vcard",
            "language": "python",
            "files": "\\.vcf$"
        }
    ],
    "https://github.com/Data-Liberation-Front/csvlint.rb": [
        {
            "id": "csvlint",
            "name": "csvlint",
            "entry": "csvlint",
            "language": "ruby",
            "files": "\\.csv$"
        }
    ],
    "https://github.com/christopher-hacker/enforce-notebook-run-order": [
        {
            "id": "enforce-notebook-run-order",
            "name": "enforce-notebook-run-order",
            "description": "Ensure that committed Jupyter notebooks aren't run out of order",
            "entry": "enforce-notebook-run-order",
            "language": "python",
            "files": "\\.ipynb$",
            "language_version": "python3",
            "fail_fast": false
        }
    ],
    "https://github.com/mxr/unkey": [
        {
            "id": "unkey",
            "name": "unkey",
            "description": "Automatically remove extra calls to keys().",
            "entry": "unkey",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/Mateusz-Grzelinski/actionlint-py": [
        {
            "id": "actionlint",
            "name": "actionlint",
            "description": "Lint GitHub workflows with actionlint",
            "entry": "actionlint",
            "language": "python",
            "types": [
                "yaml"
            ],
            "files": "^.github/workflows/"
        }
    ],
    "https://github.com/andrewring/github-distributed-owners": [
        {
            "id": "github-distributed-owners",
            "name": "GitHub Distributed Owners",
            "description": "Auto generate a GitHub compatible CODEOWNERS files from OWNERS files distributed through the file tree.",
            "entry": "github-distributed-owners",
            "language": "rust",
            "types": [
                "file",
                "text"
            ],
            "args": [
                "--output-file=.github/CODEOWNERS"
            ],
            "pass_filenames": false,
            "require_serial": true
        }
    ],
    "https://github.com/Mermeid-Designs/pydantic-hooks": [
        {
            "id": "pydantic-to-schema",
            "name": "Pydantic Model to JSON Schema",
            "description": "Convert pydantic models to corresponding json schemas.",
            "entry": "pydantic-to-schema",
            "language": "python",
            "types_or": [
                "python",
                "pyi"
            ]
        },
        {
            "id": "pydantic-to-json",
            "name": "Instanciated Pydantic Model to JSON",
            "description": "Convert any instanciated pydantic models to their corresponding json representation.",
            "entry": "pydantic-to-json",
            "language": "python",
            "types_or": [
                "python",
                "pyi"
            ]
        }
    ],
    "https://github.com/igrr/astyle_py": [
        {
            "id": "astyle_py",
            "name": "astyle formatter",
            "description": "Astyle python wrapper. By default checks the formatting according to the given options. If '--fix' option is given, corrects formatting. Pass astyle options (such as '--style=otbs') via 'args' array.",
            "entry": "astyle_py",
            "language": "python",
            "files": "^.*\\.(c|cpp|cxx|h|hpp|inc)$"
        }
    ],
    "https://gitlab.com/codementors/pre-commit/add-issue-number-to-conventional-commit": [
        {
            "id": "add-issue-number",
            "name": "Add issue number",
            "description": "Looks for an issue number in the current branch name and adds it to the conventional commit",
            "entry": "add-issue-number-to-conventional-commit",
            "language": "python",
            "stages": [
                "prepare-commit-msg"
            ]
        }
    ],
    "https://github.com/numpy/numpydoc": [
        {
            "id": "numpydoc-validation",
            "name": "numpydoc-validation",
            "description": "This hook validates that docstrings in committed files adhere to numpydoc standards.",
            "entry": "numpydoc lint",
            "require_serial": true,
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/hakancelikdev/unimport": [
        {
            "id": "unimport",
            "name": "unimport",
            "description": "\ud83d\ude80 The ultimate linter and formatter for removing unused import statements in your code.",
            "entry": "unimport",
            "language": "python",
            "language_version": "python3",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/hakancelikdev/unexport": [
        {
            "id": "unexport",
            "name": "unexport",
            "description": "unexport is a linter that tries to keep the __all __ in your Python modules always up to date.",
            "entry": "unexport",
            "language": "python",
            "language_version": "python3",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/KindDragon/gn-build-py": [
        {
            "id": "gn-format",
            "name": "GN Format",
            "description": "This hook formats GN files using the gn binary packed to python package.",
            "entry": "gn format",
            "language": "python",
            "files": "\\.(gn|gni)$"
        }
    ],
    "https://github.com/stefmolin/exif-stripper": [
        {
            "id": "strip-exif",
            "name": "strip-exif",
            "description": "This hook ensures that no image metadata (EXIF) is present on images added to version control.",
            "entry": "strip-exif",
            "language": "python",
            "types": [
                "image"
            ]
        }
    ],
    "https://github.com/hhatto/autopep8": [
        {
            "id": "autopep8",
            "name": "autopep8",
            "description": "A tool that automatically formats Python code to conform to the PEP 8 style guide.",
            "entry": "autopep8",
            "language": "python",
            "types": [
                "python"
            ],
            "args": [
                "-i"
            ]
        }
    ],
    "https://github.com/rhysd/actionlint": [
        {
            "id": "actionlint",
            "name": "Lint GitHub Actions workflow files",
            "description": "Runs actionlint to lint GitHub Actions workflow files",
            "language": "golang",
            "types": [
                "yaml"
            ],
            "files": "^\\.github/workflows/",
            "entry": "actionlint",
            "minimum_pre_commit_version": "3.0.0"
        },
        {
            "id": "actionlint-docker",
            "name": "Lint GitHub Actions workflow files",
            "description": "Runs actionlint Docker image to lint GitHub Actions workflow files",
            "language": "docker_image",
            "types": [
                "yaml"
            ],
            "files": "^\\.github/workflows/",
            "entry": "docker.io/rhysd/actionlint:1.7.0"
        },
        {
            "id": "actionlint-system",
            "name": "Lint GitHub Actions workflow files",
            "description": "Runs system-installed actionlint to lint GitHub Actions workflow files",
            "language": "system",
            "types": [
                "yaml"
            ],
            "files": "^\\.github/workflows/",
            "entry": "actionlint"
        }
    ],
    "https://github.com/hija/clean-dotenv": [
        {
            "id": "clean-dotenv",
            "name": "Clean Dotenv",
            "description": "Automatically creates an .env.example which creates the same keys as your .env file, but without the values",
            "entry": "clean-dotenv",
            "language": "python",
            "always_run": true,
            "pass_filenames": false
        }
    ]
}